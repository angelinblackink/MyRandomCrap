<!DOCTYPE muclient>
<!-- Proof I have something wrong with me. -->
<!-- Saved on Saturday, September 05, 2015, 11:00 PM -->

<muclient>
	<plugin
			name="ocb_plugin"
			author="angelinblackink"
			id="975b5257451724b3d544f311"
			language="Lua"
			purpose="Bag organization, utility and quest piece combination with greater ease."
			save_state="y"
			date_written="2015-09-05 22:58:17"
			requires="4.94"
			version="1.0"
			>
		<description trim="y">
			<![CDATA[
Obsessive Compulsive Bags is for organizing your inventory, bags and also your quest items. The plugin is
meant for a main bag, such as a backpack, and eight stackable bags nested inside for potions, gear, loot,
coupons, miscellaneous items, shinare pieces and lance pieces.

I suggest you take 8 bags of marbles or leather money pouches and then restringing them for convenience. 
You CAN just use any 8 stock bags, but be mindful of which keywords you choose.

This plugin also contains commands that create and then build both shinare and quest pieces!


Type 'ocbhelp' for more information on how to use this plugin.

]]>
		</description>

	</plugin>


	<!--  Get our standard constants -->

	<include name="constants.lua"/>

	<!--  Aliases  -->

	<aliases>
		<alias
				match="gcash"
				enabled="y"
				group="ocb_Utilities"
				send_to="12"
				sequence="100"
				>
			<send>mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				else
				Send("open "..mainargs)
				Send("get coins "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="ptrash"
				enabled="y"
				group="ocb_Utilities"
				send_to="12"
				sequence="100"
				>
			<send>lootargs=GetVariable ("LootBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif lootargs == nil then
				ColourNote ("red", "black", "Your Loot bag is not set!")
				else
				Send("put all.flask pit")
				Send("put all.jug pit")
				Send("put all.wine pit")
				Send("put all.water pit")
				Send("put all.canteen pit")
				Send("put all.gourd pit")
				Send("put all.food pit")
				Send("get all.food")
				Send("open "..mainargs)
				Send("get "..lootargs.." "..mainargs)
				Send ( "open "..lootargs)
				Send("put all.compon "..lootargs)
				Send("put all.figur "..lootargs)
				Send("put all.die "..lootargs)
				Send("put all.tile "..lootargs)
				Send("put all.statu "..lootargs)
				Send("put all.rand "..lootargs)
				Send ( "close "..lootargs)
				Send("put "..lootargs.." "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="REST"
				enabled="y"
				group="ocb_Utilities"
				send_to="12"
				sequence="100"
				>
			<send>bedargs=GetVariable ("MyBed")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif bedargs == nil then
				ColourNote ("red", "black", "Your bed is not set!")
				else
				Send("open "..mainargs)
				Send("get "..bedargs.." "..mainargs)
				Send("close "..mainargs)
				Send("rest ")
				end
			</send>
		</alias>
		<alias
				match="^ocbhelp list$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>
				Note ( "\" )
				ColourNote ("lightblue", "black", "Resting\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black", "Syntax:       torch\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command gets fuel, fills your light with it and then \" )
				ColourNote ("silver", "black", "puts it away. Be aware that you must store your fuel with \" )
				ColourNote ("silver", "black", "your potions for this command to work correctly.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="SLEEP"
				enabled="y"
				group="ocb_Utilities"
				send_to="12"
				sequence="100"
				>
			<send>bedargs=GetVariable ("MyBed")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif bedargs == nil then
				ColourNote ("red", "black", "Your bed is not set!")
				else
				Send("open "..mainargs)
				Send("get "..bedargs.." "..mainargs)
				Send("close "..mainargs)
				Send("sleep")
				end
			</send>
		</alias>
		<alias
				match="^ocbhelp loot$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>
				Note ( "\" )
				ColourNote ("lightblue", "black", "Loot\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       dloot\" )
				ColourNote ("white", "black",  "Syntax:       ploot\" )
				Note ( "\" )
				ColourNote ("silver", "black", "These commands dump food and crappy drinks from your inventory,\" )
				ColourNote ("silver", "black", "then deposits components, quest items and random items into\" )
				ColourNote ("silver", "black", "their appropriate bags. The dloot command dumps things to the\" )
				ColourNote ("silver", "black", "ground and the ploot command dumps things into the pit.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       gloot\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command retrieves your hoard of loot for selling and organization.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("lightblue", "black", "Money\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       dcash amount 'coin type'\" )
				ColourNote ("white", "black",  "Syntax:       dcash 10000 copper\" )
				Note ( "\" )
				ColourNote ("silver", "black", "These commands puts your money where it won't weigh as much with fewer commands.\" )
				Note ( "\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       gcash\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command gets all of your money from where you have it stashed.\" )
				Note ( "\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="torch"
				enabled="y"
				group="ocb_Utilities"
				send_to="12"
				sequence="100"
				>
			<send>lightargs=GetVariable ("MyLight")
				potargs=GetVariable ("PotBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif potargs == nil then
				ColourNote ("red", "black", "Your Potions bag is not set!")
				elseif lightargs == nil then
				ColourNote ("red", "black", "Your Light is not set!")
				else
				Send ( "open "..mainargs )
				Send ( "get "..potargs.." "..mainargs )
				Send ( "get oil "..potargs )
				Send ( "pour oil "..lightargs )
				Send ( "pour oil "..lightargs )
				Send ( "wear "..lightargs )
				Send ( "put oil "..potargs )
				Send ( "put "..potargs.." "..mainargs )
				Send ( "close "..mainargs )
				end
			</send>
		</alias>
		<alias
				match="^ocbhelp money$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>
				Note ( "\" )
				ColourNote ("lightblue", "black", ( "Money\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       dcash amount 'coin type'\" )
				ColourNote ("white", "black",  "Syntax:       dcash 10000 copper\" )
				Note ( "\" )
				ColourNote ("silver", "black", "These commands puts your money where it won't weigh as much with fewer commands.\" )
				Note ( "\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       gcash\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command gets all of your money from where you have it stashed.\" )
				Note ( "\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="^ocbhelp order$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>
				Note ( "\" )
				ColourNote ("lightblue", "black", "Order\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       o'type'\" )
				ColourNote ("olive", "black",  "Example:      omain\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command orders your main bag and quest bags for ease of\" )
				ColourNote ("silver", "black", "viewing. The quest bags are pre-set, but your main bag can be\" )
				ColourNote ("silver", "black", "set manually. See 'ocbhelp 3' and 'ocbhelp 4' for information\" )
				ColourNote ("silver", "black", "on how.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("lightblue", "black", "Available Bag Types:\" )
				Note ( "\" )
				ColourNote ("olive", "black", "    Lance         ", "silver", "black", "Lancequest Pieces\" )
				ColourNote ("olive", "black", "    Main          ", "silver", "black", "Main Backpack Type\" )
				ColourNote ("olive", "black", "    Shin          ", "silver", "black", "Shinare's Quest Pieces\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="^ocbhelp put$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>
				Note ( "\" )
				ColourNote ("lightblue", "black", "Put\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       p'type' item\" )
				ColourNote ("white", "black",  "Syntax:       p'type' all.item\" )
				ColourNote ("olive", "black", "Example:      pcoup restring\" )
				ColourNote ("olive", "black", "Example:      ppot all.recall\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command is the universal command used to put items into all\" )
				ColourNote ("silver", "black", "of your bags.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("lightblue", "black", "Available Bag Types:\" )
				Note ( "\" )
				ColourNote ("olive", "black", "    Coup          ", "silver", "black", "Coupons\" )
				ColourNote ("olive", "black", "    Gear          ", "silver", "black", "Extra Gear\" )
				ColourNote ("olive", "black", "    Lance         ", "silver", "black", "Lancequest Pieces\" )
				ColourNote ("olive", "black", "    Loot          ", "silver", "black", "Unsorted Loot\" )
				ColourNote ("olive", "black", "    Main          ", "silver", "black", "Main Backpack Type\" )
				ColourNote ("olive", "black", "    Map           ", "silver", "black", "Maps\" )
				ColourNote ("olive", "black", "    Misc          ", "silver", "black", "Components, Collectables, Ect.\" )
				ColourNote ("olive", "black", "    Pot           ", "silver", "black", "Potions and Scrolls\" )
				ColourNote ("olive", "black", "    Shin          ", "silver", "black", "Shinare's Quest Pieces\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="slance"
				enabled="y"
				group="ocb_LBag"
				send_to="12"
				sequence="100"
				>
			<send>lanceargs=GetVariable ("LanceBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif lanceargs == nil then
				ColourNote ("red", "black", "Your Lance bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get spear "..mainargs)
				Send ( "get all.part "..lanceargs)
				Send ( "put all.box "..lanceargs)
				Send ( "search sword")
				Send ( "search 2.sword")
				Send ( "search rose")
				Send ( "search 2.rose")
				Send ( "search crown")
				Send ( "search 2.crown")
				Send ( "put all.part "..lanceargs)
				Send ( "put "..lanceargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="cloot *"
				enabled="y"
				group="ocb_LootBag"
				send_to="12"
				sequence="100"
				>
			<send>lootargs=GetVariable ("LootBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif lootargs == nil then
				ColourNote ("red", "black", "Your Loot bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..lootargs.." "..mainargs)
				Send ("open "..lootargs)
				Send ( "get %1 "..lootargs)
				Send ( "compare %1")
				Send ( "put %1 "..lootargs)
				Send ("close "..lootargs)
				Send ( "put "..lootargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^gloot (.*?)$"
				enabled="y"
				group="ocb_LootBag"
				regexp="y"
				send_to="12"
				sequence="100"
				>
			<send>lootargs=GetVariable ("LootBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif lootargs == nil then
				ColourNote ("red", "black", "Your Loot bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..lootargs.." "..mainargs)
				Send ( "open "..lootargs)
				Send ( "get %1 "..lootargs)
				Send ( "close "..lootargs)
				Send ( "put "..lootargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^gloot$"
				enabled="y"
				group="ocb_LootBag"
				regexp="y"
				send_to="12"
				sequence="100"
				>
			<send>lootargs=GetVariable ("LootBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif lootargs == nil then
				ColourNote ("red", "black", "Your Loot bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..lootargs.." "..mainargs)
				Send ( "open "..lootargs)
				Send ( "get all.compon "..lootargs)
				Send ( "get all.figur "..lootargs)
				Send ( "get all.die "..lootargs)
				Send ( "get all.tile "..lootargs)
				Send ( "get all.statu "..lootargs)
				Send ( "get all.rand "..lootargs)
				Send ( "close "..lootargs)
				Send ( "put "..lootargs.." "..mainargs)
				Send ( "close "..mainargs)
				Send ( "inventory" )
				end
			</send>
		</alias>
		<alias
				match="lloot"
				enabled="y"
				group="ocb_LootBag"
				send_to="12"
				sequence="100"
				>
			<send>lootargs=GetVariable ("LootBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif lootargs == nil then
				ColourNote ("red", "black", "Your Loot bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..lootargs.." "..mainargs)
				Send ( "open "..lootargs)
				Send ( "search "..lootargs)
				Send ( "close "..lootargs)
				Send ( "put "..lootargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="ploot *"
				enabled="y"
				group="ocb_LootBag"
				send_to="12"
				sequence="100"
				>
			<send>lootargs=GetVariable ("LootBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif lootargs == nil then
				ColourNote ("red", "black", "Your Loot bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..lootargs.." "..mainargs)
				Send ( "open "..lootargs)
				Send ( "put %1 "..lootargs)
				Send ( "search "..lootargs)
				Send ( "close "..lootargs)
				Send ( "put "..lootargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="WAKE"
				enabled="y"
				group="ocb_Utilities"
				send_to="12"
				sequence="100"
				>
			<send>bedargs=GetVariable ("MyBed")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif bedargs == nil then
				ColourNote ("red", "black", "Your bed is not set!")
				else
				Send("wake")
				Send("open "..mainargs)
				Send("put "..bedargs.." "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="xloot *"
				enabled="y"
				group="ocb_LootBag"
				send_to="12"
				sequence="100"
				>
			<send>lootargs=GetVariable ("LootBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif lootargs == nil then
				ColourNote ("red", "black", "Your Loot bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..lootargs.." "..mainargs)
				Send ( "open "..lootargs)
				Send ( "get %1 "..lootargs)
				Send ( "examine %1")
				Send ( "put %1 "..lootargs)
				Send ( "close "..lootargs)
				Send ( "put "..lootargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="cmain *"
				enabled="y"
				group="ocb_MainBag"
				send_to="12"
				sequence="100"
				>
			<send>mainargs=GetVariable ("GearBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif mainargs == nil then
				ColourNote ("red", "black", "Your Gear bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get %1 "..mainargs)
				Send ( "compare %1" )
				Send ( "put %1 "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="dmain *"
				enabled="y"
				group="ocb_MainBag"
				send_to="12"
				sequence="100"
				>
			<send>mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				else
				Send("open "..mainargs)
				Send("get %1 "..mainargs)
				Send("drink %1")
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="emain *"
				enabled="y"
				group="ocb_MainBag"
				send_to="12"
				sequence="100"
				>
			<send>mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				else
				Send("open "..mainargs)
				Send("get %1 "..mainargs)
				Send("eat %1")
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="gmain *"
				enabled="y"
				group="ocb_MainBag"
				send_to="12"
				sequence="100"
				>
			<send>mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				else
				Send("open "..mainargs)
				Send("get %1 "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="lmain"
				enabled="y"
				group="ocb_MainBag"
				send_to="12"
				sequence="100"
				>
			<send>mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				else
				Send("open "..mainargs)
				Send("search "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="omain"
				enabled="y"
				group="ocb_MainBag"
				send_to="12"
				sequence="100"
				>
			<send>mainargs=GetVariable ("MainBag")
				b1args=GetVariable ("bag1")
				b2args=GetVariable ("bag2")
				b3args=GetVariable ("bag3")
				b4args=GetVariable ("bag4")
				b5args=GetVariable ("bag5")
				b6args=GetVariable ("bag6")
				b7args=GetVariable ("bag7")
				b8args=GetVariable ("bag8")
				i1args=GetVariable ("Item1")
				i2args=GetVariable ("Item2")
				i3args=GetVariable ("Item3")
				i4args=GetVariable ("Item4")
				i5args=GetVariable ("Item5")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				else
				Send ("open "..mainargs)
				Send ("get all "..mainargs)
				end

				if i5args == nil then 
				ColourNote ("red", "black", "No item is set for slot 5, yet!\")
				else
				Send ("put "..i5args.." "..mainargs)
				end

				if i4args == nil then 
				ColourNote ("red", "black", "No item is set for slot 4, yet!\")
				else
				Send ("put  "..i4args.." "..mainargs)
				end

				if i3args == nil then 
				ColourNote ("red", "black", "No item is set for slot 3, yet!\")
				else
				Send ("put "..i3args.." "..mainargs)
				end

				if i2args == nil then 
				ColourNote ("red", "black", "No item is set for slot 2, yet!\")
				else
				Send ("put "..i2args.." "..mainargs)
				end

				if i1args == nil then 
				ColourNote ("red", "black", "No item is set for slot 1, yet!\")
				else
				Send ("put "..i1args.." "..mainargs)
				end

				if b8args == nil then
				ColourNote ("red", "black", "No bag is set for slot 8, yet!")
				else
				Send ("put "..b8args.." "..mainargs)
				end

				if b7args == nil then
				ColourNote ("red", "black", "No bag is set for slot 7, yet!")
				else
				Send ("put "..b7args.." "..mainargs)
				end

				if b6args == nil then
				ColourNote ("red", "black", "No bag is set for slot 6, yet!")
				else
				Send ("put "..b6args.." "..mainargs)
				end

				if b5args == nil then
				ColourNote ("red", "black", "No bag is set for slot 5, yet!")
				else
				Send ("put "..b5args.." "..mainargs)
				end

				if b4args == nil then
				ColourNote ("red", "black", "No bag is set for slot 4, yet!")
				else
				Send ("put "..b4args.." "..mainargs)
				end

				if b3args == nil then
				ColourNote ("red", "black", "No bag is set for slot 3, yet!")
				else
				Send ("put "..b3args.." "..mainargs)
				end

				if b2args == nil then
				ColourNote ("red", "black", "No bag is set for slot 2, yet!")
				else
				Send ("put "..b2args.." "..mainargs)
				end

				if b1args == nil then
				ColourNote ("red", "black", "No bag is set for slot 1, yet!")
				else
				Send ("put "..b1args.." "..mainargs)
				end

				Send ("search "..mainargs)
				Send ("close "..mainargs)
			</send>
		</alias>
		<alias
				match="pmain *"
				enabled="y"
				group="ocb_MainBag"
				send_to="12"
				sequence="100"
				>
			<send>mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				else
				Send("open "..mainargs)
				Send("put %1 "..mainargs)
				Send("search "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="xmain *"
				enabled="y"
				group="ocb_MainBag"
				send_to="12"
				sequence="100"
				>
			<send>mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get %1 "..mainargs)
				Send ( "examine %1" )
				Send ( "put %1 "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="gmap *"
				enabled="y"
				group="ocb_MapBag"
				send_to="12"
				sequence="100"
				>
			<send>mapargs=GetVariable ("MapBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif mapargs == nil then
				ColourNote ("red", "black", "Your Map bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..mapargs.." "..mainargs)
				Send ( "get %1 "..mapargs)
				Send ( "put "..mapargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^set coupbag (.*?)$"
				enabled="y"
				group="OCB_BagSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("CoupBag", "%1")
				SetVariable("bag8", "%1")
				coupargs=GetVariable ("CoupBag")
				if coupargs == nil then
				ColourNote ("red", "black", "Coupon bag is not set!")
				else 
				ColourNote ("lime", "black", "Coupon bag is now set in Slot 8 as "..coupargs)
				end</send>
		</alias>
		<alias
				match="^set gearbag (.*?)$"
				enabled="y"
				group="OCB_BagSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("GearBag", "%1")
				SetVariable("bag7", "%1")
				gearargs=GetVariable ("GearBag")
				if gearargs == nil then
				ColourNote ("red", "black", "Gear bag is not set!")
				else 
				ColourNote ("lime", "black", "Gear bag is now set in Slot 7 as "..gearargs)
				end</send>
		</alias>
		<alias
				match="^set lancebag (.*?)$"
				enabled="y"
				group="OCB_BagSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("LanceBag", "%1")
				SetVariable("bag2", "%1")
				lanceargs=GetVariable ("LanceBag")
				if lanceargs == nil then
				ColourNote ("red", "black", "Lance bag is not set!")
				else 
				ColourNote ("lime", "black", "Lance bag is now set in Slot 2 as "..lanceargs)
				end</send>
		</alias>
		<alias
				match="^set lootbag (.*?)$"
				enabled="y"
				group="OCB_BagSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("LootBag", "%1")
				SetVariable("bag6", "%1")
				lootargs=GetVariable ("LootBag")
				if lootargs == nil then
				ColourNote ("red", "black", "Loot bag is not set!")
				else 
				ColourNote ("lime", "black", "Loot bag is now set in Slot 6 as "..lootargs)
				end</send>
		</alias>
		<alias
				match="^set mainbag (.*?)$"
				enabled="y"
				group="OCB_BagSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("MainBag", "%1")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Main bag is not set!")
				else 
				ColourNote ("lime", "black", "Main bag is now set as "..mainargs)
				end</send>
		</alias>
		<alias
				match="lmap"
				enabled="y"
				group="ocb_MapBag"
				send_to="12"
				sequence="100"
				>
			<send>mapargs=GetVariable ("MapBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif mapargs == nil then
				ColourNote ("red", "black", "Your Map bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..mapargs.." "..mainargs)
				Send ( "search "..mapargs)
				Send ( "put "..mapargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="pmap *"
				enabled="y"
				group="ocb_MapBag"
				send_to="12"
				sequence="100"
				>
			<send>mapargs=GetVariable ("MapBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif mapargs == nil then
				ColourNote ("red", "black", "Your Map bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..mapargs.." "..mainargs)
				Send ( "put %1 "..mapargs)
				Send ( "search "..mapargs)
				Send ( "put "..mapargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="rmap *"
				enabled="y"
				group="ocb_MapBag"
				send_to="12"
				sequence="100"
				>
			<send>mapargs=GetVariable ("MapBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif mapargs == nil then
				ColourNote ("red", "black", "Your Map bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..mapargs.." "..mainargs)
				Send ( "get %1 "..mapargs)
				Send ( "read %1" )
				Send ( "put %1 "..mapargs)
				Send ( "put "..mapargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="xmap *"
				enabled="y"
				group="ocb_MapBag"
				send_to="12"
				sequence="100"
				>
			<send>mapargs=GetVariable ("MapBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif mapargs == nil then
				ColourNote ("red", "black", "Your Map bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..mapargs.." "..mainargs)
				Send ( "get %1 "..mapargs)
				Send ( "examine %1" )
				Send ( "put "..mapargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="cmisc *"
				enabled="y"
				group="ocb_MiscBag"
				send_to="12"
				sequence="100"
				>
			<send>miscargs=GetVariable ("MiscBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif miscargs == nil then
				ColourNote ("red", "black", "Your Miscellaneous bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..miscargs.." "..mainargs)
				Send ( "get %1 "..miscargs)
				Send ( "compare %1" )
				Send ( "put %1 "..miscargs)
				Send ( "put "..miscargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="gpot *"
				enabled="y"
				group="ocb_PotBag"
				send_to="12"
				sequence="100"
				>
			<send>potargs=GetVariable ("PotBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif potargs == nil then
				ColourNote ("red", "black", "Your Potions bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..potargs.." "..mainargs)
				Send ( "get %1 "..potargs)
				Send ( "put "..potargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="lpot"
				enabled="y"
				group="ocb_PotBag"
				send_to="12"
				sequence="100"
				>
			<send>potargs=GetVariable ("PotBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif potargs == nil then
				ColourNote ("red", "black", "Your Potions bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..potargs.." "..mainargs)
				Send ( "search "..potargs)
				Send ( "put "..potargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="ppot *"
				enabled="y"
				group="ocb_PotBag"
				send_to="12"
				sequence="100"
				>
			<send>potargs=GetVariable ("PotBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif potargs == nil then
				ColourNote ("red", "black", "Your Potions bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..potargs.." "..mainargs)
				Send ( "put %1 "..potargs)
				Send ( "search "..potargs)
				Send ( "put "..potargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^set mapbag (.*?)$"
				enabled="y"
				group="OCB_BagSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("MapBag", "%1")
				SetVariable("bag5", "%1")
				mapargs=GetVariable ("MapBag")
				if mapargs == nil then
				ColourNote ("red", "black", "Map bag is not set!")
				else 
				ColourNote ("lime", "black", "Map bag is now set in Slot 5 as "..mapargs)
				end</send>
		</alias>
		<alias
				match="xpot *"
				enabled="y"
				group="ocb_PotBag"
				send_to="12"
				sequence="100"
				>
			<send>potargs=GetVariable ("PotBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif potargs == nil then
				ColourNote ("red", "black", "Your Potions bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..potargs.." "..mainargs)
				Send ( "get %1 "..potargs)
				Send ( "examine %1" )
				Send ( "put %1 "..potargs)
				Send ( "put "..potargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^set miscbag (.*?)$"
				enabled="y"
				group="OCB_BagSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("MiscBag", "%1")
				SetVariable("bag4", "%1")
				miscargs=GetVariable ("MiscBag")
				if miscargs == nil then
				ColourNote ("red", "black", "Miscellaneous bag is not set!")
				else 
				ColourNote ("lime", "black", "Miscellaneous bag is now set in Slot 4 as "..miscargs)
				end</send>
		</alias>
		<alias
				match="^bpart (.*?)$"
				enabled="y"
				group="ocb_QuestParts"
				regexp="y"
				send_to="12"
				sequence="100"
				>
			<send>shinargs=GetVariable ("ShinBag")
				mainargs=GetVariable ("MainBag")
				if shinargs == nil then
				ColourNote ("red", "black", "Shinare bag is not set!")
				elseif mainargs == nil then
				ColourNote ("red", "black", "Main bag is not set!")
				else
				Send("open "..mainargs)
				Send("get "..shinargs.." "..mainargs)
				Send("get all.%1 "..shinargs)
				Send("put all.shinare "..mainargs)
				Send("get slat "..mainargs)
				Send("get hinge "..mainargs)
				Send("get lid "..mainargs)
				Send("get lock "..mainargs)
				Send("get key "..mainargs)
				Send("get all.shinare "..mainargs)
				Send("comb part slat")
				Send("comb part slat")
				Send("comb part slat")
				Send("comb part slat")
				Send("comb part slat")
				Send("comb part slat")
				Send("comb part hinge")
				Send("comb part hinge")
				Send("comb part lid")
				Send("comb part lock")
				Send("comb part key")
				Send("search part")
				Send("put all.%1 "..shinargs)
				Send("put "..shinargs.." "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^set potbag (.*?)$"
				enabled="y"
				group="OCB_BagSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("PotBag", "%1")
				SetVariable("bag3", "%1")
				potargs=GetVariable ("PotBag")
				if potargs == nil then
				ColourNote ("red", "black", "Potion bag is not set!")
				else 
				ColourNote ("lime", "black", "Potion bag is now set in Slot 3 as "..potargs)
				end</send>
		</alias>
		<alias
				match="^set shinbag (.*?)$"
				enabled="y"
				group="OCB_BagSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("ShinBag", "%1")
				SetVariable("bag1", "%1")
				shinargs=GetVariable ("ShinBag")
				if shinargs == nil then
				ColourNote ("red", "black", "Shinare bag is not set!")
				else 
				ColourNote ("lime", "black", "Shinare bag is now set in Slot 1 as "..shinargs)
				end</send>
		</alias>
		<alias
				match="gcoup *"
				enabled="y"
				group="ocb_Coupbag"
				send_to="12"
				sequence="100"
				>
			<send>coupargs=GetVariable ("Coupbag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif coupargs == nil then
				ColourNote ("red", "black", "Your Coupon bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..coupargs.." "..mainargs)
				Send ( "get %1 "..coupargs)
				Send ( "put "..coupargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="gmisc *"
				enabled="y"
				group="ocb_MiscBag"
				send_to="12"
				sequence="100"
				>
			<send>miscargs=GetVariable ("MiscBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif miscargs == nil then
				ColourNote ("red", "black", "Your Miscellaneous bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..miscargs.." "..mainargs)
				Send ( "get %1 "..miscargs)
				Send ( "put "..miscargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="lmisc"
				enabled="y"
				group="ocb_MiscBag"
				send_to="12"
				sequence="100"
				>
			<send>miscargs=GetVariable ("MiscBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif miscargs == nil then
				ColourNote ("red", "black", "Your Miscellaneous bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..miscargs.." "..mainargs)
				Send ( "search "..miscargs)
				Send ( "put "..miscargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="pmisc *"
				enabled="y"
				group="ocb_MiscBag"
				send_to="12"
				sequence="100"
				>
			<send>miscargs=GetVariable ("MiscBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif miscargs == nil then
				ColourNote ("red", "black", "Your Miscellaneous bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..miscargs.." "..mainargs)
				Send ( "put %1 "..miscargs)
				Send ( "search "..miscargs)
				Send ( "put "..miscargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="rmisc *"
				enabled="y"
				group="ocb_MiscBag"
				send_to="12"
				sequence="100"
				>
			<send>miscargs=GetVariable ("MiscBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif miscargs == nil then
				ColourNote ("red", "black", "Your Miscellaneous bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..miscargs.." "..mainargs)
				Send ( "get %1 "..miscargs)
				Send ( "read %1" )
				Send ( "put %1 "..miscargs)
				Send ( "put "..miscargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="xmisc *"
				enabled="y"
				group="ocb_MiscBag"
				send_to="12"
				sequence="100"
				>
			<send>miscargs=GetVariable ("MiscBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif miscargs == nil then
				ColourNote ("red", "black", "Your Miscellaneous bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..miscargs.." "..mainargs)
				Send ( "get %1 "..miscargs)
				Send ( "examine %1" )
				Send ( "put %1 "..miscargs)
				Send ( "put "..miscargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^fpart (.*?)$"
				enabled="y"
				group="ocb_QuestParts"
				regexp="y"
				send_to="12"
				sequence="100"
				>
			<send>lanceargs=GetVariable ("LanceBag")
				mainargs=GetVariable ("MainBag")
				if lanceargs == nil then
				ColourNote ("red", "black", "Lance bag is not set!")
				elseif mainargs == nil then
				ColourNote ("red", "black", "Main bag is not set!")
				else
				Send("open "..mainargs)
				Send("get "..lanceargs.." "..mainargs)
				Send("get all.%1 "..lanceargs)
				Send("put all.knight "..lanceargs)
				Send("put all.footman "..mainargs)
				Send("get shaft "..mainargs)
				Send("get dragonshield "..mainargs)
				Send("get cap "..mainargs)
				Send("get clamp "..mainargs)
				Send("comb %1 2.%1")
				Send("comb part shaft")
				Send("comb part dragonshield")
				Send("comb part cap")
				Send("comb part clamp")
				Send("get all.footman "..mainargs)
				Send("search part")
				Send("put all.dragonlance "..lanceargs)
				Send("put "..lanceargs.." "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^kpart (.*?)$"
				enabled="y"
				group="ocb_QuestParts"
				regexp="y"
				send_to="12"
				sequence="100"
				>
			<send>lanceargs=GetVariable ("LanceBag")
				mainargs=GetVariable ("MainBag")
				if lanceargs == nil then
				ColourNote ("red", "black", "Lance bag is not set!")
				elseif mainargs == nil then
				ColourNote ("red", "black", "Main bag is not set!")
				else
				Send("open "..mainargs)
				Send("get "..lanceargs.." "..mainargs)
				Send("get all.%1 "..lanceargs)
				Send("put all.footm "..lanceargs)
				Send("put all.knight "..mainargs)
				Send("get Shaft "..mainargs)
				Send("get Sleeve "..mainargs)
				Send("get Mount "..mainargs)
				Send("get Pin "..mainargs)
				Send("get Post "..mainargs)
				Send("get Dragonshield "..mainargs)
				Send("get Cap "..mainargs)
				Send("get Clamp "..mainargs)
				Send("combine %1 2.%1")
				Send("comb part shaft")
				Send("comb part sleeve")
				Send("comb part mount")
				Send("comb part pin")
				Send("comb part post")
				Send("comb part dragonshield")
				Send("comb part cap")
				Send("comb part clamp")
				Send("get all.dragonlance "..mainargs)
				Send("search part")
				Send("put all.dragonlance "..lanceargs)
				Send("put "..lanceargs.." "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^mbox (.*?)$"
				enabled="y"
				group="ocb_QuestParts"
				regexp="y"
				send_to="12"
				sequence="100"
				>
			<send>shinargs=GetVariable ("ShinBag")
				mainargs=GetVariable ("MainBag")
				if shinargs == nil then
				ColourNote ("red", "black", "Shinare bag is not set!")
				elseif mainargs == nil then
				ColourNote ("red", "black", "Main bag is not set!")
				else
				Send("open "..mainargs)
				Send("get "..shinargs.." "..mainargs)
				Send("get all.%1 "..shinargs)
				Send("comb part slat")
				Send("comb part slat")
				Send("comb part slat")
				Send("comb part slat")
				Send("comb part slat")
				Send("comb part slat")
				Send("comb part hinge")
				Send("comb part hinge")
				Send("comb part lid")
				Send("comb part lock")
				Send("comb part key")
				Send("search part")
				Send("put all.%1 "..shinargs)
				Send("put "..shinargs.." "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="lcoup"
				enabled="y"
				group="ocb_Coupbag"
				send_to="12"
				sequence="100"
				>
			<send>coupargs=GetVariable ("Coupbag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif coupargs == nil then
				ColourNote ("red", "black", "Your Coupon bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..coupargs.." "..mainargs)
				Send ( "search "..coupargs)
				Send ( "put "..coupargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^mfoot (.*?)$"
				enabled="y"
				group="ocb_QuestParts"
				regexp="y"
				send_to="12"
				sequence="100"
				>
			<send>lanceargs=GetVariable ("LanceBag")
				mainargs=GetVariable ("MainBag")
				if lanceargs == nil then
				ColourNote ("red", "black", "Lance bag is not set!")
				elseif mainargs == nil then
				ColourNote ("red", "black", "Main bag is not set!")
				else
				Send("open "..mainargs)
				Send("get "..lanceargs.." "..mainargs)
				Send("get all.%1 "..lanceargs)
				Send("put all.knight "..lanceargs)
				Send("comb part shaft")
				Send("comb part Dragonshield")
				Send("comb part Cap")
				Send("comb part Clamp")
				Send("search part")
				Send("put all.%1 "..lanceargs)
				Send("put "..lanceargs.." "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="pcoup *"
				enabled="y"
				group="ocb_Coupbag"
				send_to="12"
				sequence="100"
				>
			<send>coupargs=GetVariable ("Coupbag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif coupargs == nil then
				ColourNote ("red", "black", "Your Coupon bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..coupargs.." "..mainargs)
				Send ( "put %1 "..coupargs)
				Send ( "search "..coupargs)
				Send ( "put "..coupargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^mknight (.*?)$"
				enabled="y"
				group="ocb_QuestParts"
				regexp="y"
				send_to="12"
				sequence="100"
				>
			<send>lanceargs=GetVariable ("LanceBag")
				mainargs=GetVariable ("MainBag")
				if lanceargs == nil then
				ColourNote ("red", "black", "Lance bag is not set!")
				elseif mainargs == nil then
				ColourNote ("red", "black", "Main bag is not set!")
				else
				Send("open "..mainargs)
				Send("get "..lanceargs.." "..mainargs)
				Send("get all.%1 "..lanceargs)
				Send("put all.footm "..lanceargs)
				Send("comb part Shaft")
				Send("comb part Sleeve")
				Send("comb part Mount")
				Send("comb part Pin")
				Send("comb part Post")
				Send("comb part Dragonshield")
				Send("comb part Cap")
				Send("comb part Clamp")
				Send("search part")
				Send("put all.%1 "..lanceargs)
				Send("put "..lanceargs.." "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="xcoup *"
				enabled="y"
				group="ocb_Coupbag"
				send_to="12"
				sequence="100"
				>
			<send>coupargs=GetVariable ("Coupbag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif coupargs == nil then
				ColourNote ("red", "black", "Your Coupon bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..coupargs.." "..mainargs)
				Send ( "get %1 "..coupargs)
				Send ( "examine %1" )
				Send ( "put "..coupargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="cgear *"
				enabled="y"
				group="ocb_GearBag"
				send_to="12"
				sequence="100"
				>
			<send>gearargs=GetVariable ("GearBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif gearargs == nil then
				ColourNote ("red", "black", "Your Gear bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..gearargs.." "..mainargs)
				Send ( "get %1 "..gearargs)
				Send ( "compare %1" )
				Send ( "put %1 "..gearargs)
				Send ( "put "..gearargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="cmain *"
				enabled="y"
				group="ocb_GearBag"
				send_to="12"
				sequence="100"
				>
			<send>gearargs=GetVariable ("GearBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get %1 "..mainargs)
				Send ( "compare %1" )
				Send ( "put %1 "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^orderset 1 (.*?)$"
				enabled="y"
				group="OCB_OrderSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("bag1", "%1")
				b1args=GetVariable ("bag1")
				if b1args == nil then
				ColourNote ("red", "black", "Bag 1 is not set!")
				else 
				ColourNote ("lime", "black", "Bag 1 is now set as "..b1args)
				end</send>
		</alias>
		<alias
				match="^orderset 2 (.*?)$"
				enabled="y"
				group="OCB_OrderSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("bag2", "%1")
				b2args=GetVariable ("bag2")
				if b2args == nil then
				ColourNote ("red", "black", "Bag 2 is not set!")
				else 
				ColourNote ("lime", "black", "Bag 2 is now set as "..b2args)
				end</send>
		</alias>
		<alias
				match="^orderset 3 (.*?)$"
				enabled="y"
				group="OCB_OrderSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("bag3", "%1")
				b3args=GetVariable ("bag3")
				if b3args == nil then
				ColourNote ("red", "black", "Bag 3 is not set!")
				else 
				ColourNote ("lime", "black", "Bag 3 is now set as "..b3args)
				end</send>
		</alias>
		<alias
				match="^orderset 4 (.*?)$"
				enabled="y"
				group="OCB_OrderSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("bag4", "%1")
				b4args=GetVariable ("bag4")
				if b4args == nil then
				ColourNote ("red", "black", "Bag 4 is not set!")
				else 
				ColourNote ("lime", "black", "Bag 4 is now set as "..b4args)
				end</send>
		</alias>
		<alias
				match="^orderset 5 (.*?)$"
				enabled="y"
				group="OCB_OrderSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("bag5", "%1")
				b5args=GetVariable ("bag5")
				if b5args == nil then
				ColourNote ("red", "black", "Bag 5 is not set!")
				else 
				ColourNote ("lime", "black", "Bag 5 is now set as "..b5args)
				end</send>
		</alias>
		<alias
				match="dquest"
				enabled="y"
				group="ocb_QuestParts"
				send_to="12"
				sequence="100"
				>
			<send>lanceargs=GetVariable ("LanceBag")
				shinargs=GetVariable ("ShinBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Main bag is not set!")
				elseif lanceargs == nil then
				ColourNote ("red", "black", "Lance bag is not set!")
				elseif shinargs == nil then
				ColourNote ("red", "black", "Shinare bag is not set!")
				else
				Send("open "..mainargs)
				Send("get "..lanceargs.." "..mainargs)
				Send("get "..shinargs.." "..mainargs)
				Send("put all.shinare "..shinargs)
				Send("put all.dragonlance "..lanceargs)
				Send("put "..shinargs.." "..mainargs)
				Send("put "..lanceargs.." "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="sbox"
				enabled="y"
				group="ocb_QuestParts"
				send_to="12"
				sequence="100"
				>
			<send>shinargs=GetVariable ("ShinBag")
				mainargs=GetVariable ("MainBag")
				if shinargs == nil then
				ColourNote ("red", "black", "Shinare bag is not set!")
				elseif mainargs == nil then
				ColourNote ("red", "black", "Main bag is not set!")
				else
				Send("open "..mainargs)
				Send("get "..shinargs.." "..mainargs)
				Send("get all.box "..shinargs)
				Send("search garnet")
				Send("search opal")
				Send("search pearl")
				Send("search emerald")
				Send("search ruby")
				Send("search diamond")
				Send("put all.box "..shinargs)
				Send("put "..shinargs.." "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="slance"
				enabled="y"
				group="ocb_QuestParts"
				send_to="12"
				sequence="100"
				>
			<send>lanceargs=GetVariable ("LanceBag")
				mainargs=GetVariable ("MainBag")
				if lanceargs == nil then
				ColourNote ("red", "black", "Lance bag is not set!")
				elseif mainargs == nil then
				ColourNote ("red", "black", "Main bag is not set!")
				else
				Send("open "..mainargs)
				Send("get "..lanceargs.." "..mainargs)
				Send("get all.part "..lanceargs)
				Send("put all.box "..lanceargs)
				Send("search sword")
				Send("search 2.sword")
				Send("search rose")
				Send("search 2.rose")
				Send("search crown")
				Send("search 2.crown")
				Send("put all.part "..lanceargs)
				Send("put "..lanceargs.." "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="ggear *"
				enabled="y"
				group="ocb_GearBag"
				send_to="12"
				sequence="100"
				>
			<send>gearargs=GetVariable ("GearBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif gearargs == nil then
				ColourNote ("red", "black", "Your Gear bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..gearargs.." "..mainargs)
				Send ( "get %1 "..gearargs)
				Send ( "put "..gearargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="gbox *"
				enabled="y"
				group="ocb_ShinBag"
				send_to="12"
				sequence="100"
				>
			<send>shinargs=GetVariable ("ShinBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif shinargs == nil then
				ColourNote ("red", "black", "Your Shinare bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..shinargs.." "..mainargs)
				Send ( "get %1 "..shinargs)
				Send ( "put "..shinargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="lgear"
				enabled="y"
				group="ocb_GearBag"
				send_to="12"
				sequence="100"
				>
			<send>gearargs=GetVariable ("GearBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif gearargs == nil then
				ColourNote ("red", "black", "Your Gear bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..gearargs.." "..mainargs)
				Send ( "search "..gearargs)
				Send ( "put "..gearargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="lbox"
				enabled="y"
				group="ocb_ShinBag"
				send_to="12"
				sequence="100"
				>
			<send>shinargs=GetVariable ("ShinBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif shinargs == nil then
				ColourNote ("red", "black", "Your Shinare bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..shinargs.." "..mainargs)
				Send ( "search "..shinargs)
				Send ( "put "..shinargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="pgear *"
				enabled="y"
				group="ocb_GearBag"
				send_to="12"
				sequence="100"
				>
			<send>gearargs=GetVariable ("GearBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif gearargs == nil then
				ColourNote ("red", "black", "Your Gear bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..gearargs.." "..mainargs)
				Send ( "put %1 "..gearargs)
				Send ( "search "..gearargs)
				Send ( "put "..gearargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="xgear *"
				enabled="y"
				group="ocb_GearBag"
				send_to="12"
				sequence="100"
				>
			<send>gearargs=GetVariable ("GearBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif gearargs == nil then
				ColourNote ("red", "black", "Your Gear bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..gearargs.." "..mainargs)
				Send ( "get %1 "..gearargs)
				Send ( "examine %1" )
				Send ( "put %1 "..gearargs)
				Send ( "put "..gearargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^ocbhelp 1$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>Note ( "\" )
				ColourNote ("lightblue", "black", "What is OCB?\" )
				ColourNote ("darkred", "grey","****************************************************************\" )
				Note ( "\" )
				ColourNote ("silver", "black", "Obsessive Compulsive Bags is for organizing your inventory,\" )
				ColourNote ("silver", "black", "bags and also your quest items. The plugin is meant for a main\" )
				ColourNote ("silver", "black", "bag, such as a backpack, and eight stackable bags nested inside\" )
				ColourNote ("silver", "black", "for potions, gear, loot, coupons, miscellaneous items, shinare\" )
				ColourNote ("silver", "black", "pieces and lance pieces.\" )
				Note ( "\" )
				ColourNote ("silver", "black", "I suggest you take 8 bags of marbles or leather money pouches\" )
				ColourNote ("silver", "black", "and then restringing them for convenience. You CAN just use any\" )
				ColourNote ("silver", "black", "8 stock bags, but be mindful of which keywords you choose.\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This plugin also contains commands that create and then build\" )
				ColourNote ("silver", "black", "both shinare and quest pieces!\" )
				ColourNote ("darkred", "grey","****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="^ocbhelp read$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>
				Note ( "\" )
				ColourNote ("lightblue", "black", "Reading, Examine and Compare\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       r'type' item\")
				ColourNote ("olive", "black", "Example:      rmap neraka\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       x'type' item\")
				ColourNote ("olive", "black", "Example:      xcoup rpa\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       c'type' item\")
				ColourNote ("olive", "black", "Example:      cloot shield\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command allows you to read, compare or examine an item\" )
				ColourNote ("silver", "black", "from your bags with ease. Note that you must manually get items\" )
				ColourNote ("silver", "black", "to compare them to themselves, still.\")
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("lightblue", "black", "Available Bag Types:\" )
				Note ( "\" )
				ColourNote ("olive", "black", "    Coup          ", "silver", "black", "Coupons\" )
				ColourNote ("olive", "black", "    Gear          ", "silver", "black", "Extra Gear\" )
				ColourNote ("olive", "black", "    Lance         ", "silver", "black", "Lancequest Pieces\" )
				ColourNote ("olive", "black", "    Loot          ", "silver", "black", "Unsorted Loot\" )
				ColourNote ("olive", "black", "    Main          ", "silver", "black", "Main Backpack Type\" )
				ColourNote ("olive", "black", "    Map           ", "silver", "black", "Maps\" )
				ColourNote ("olive", "black", "    Misc          ", "silver", "black", "Components, Collectables, Ect.\" )
				ColourNote ("olive", "black", "    Pot           ", "silver", "black", "Potions and Scrolls\" )
				ColourNote ("olive", "black", "    Shin          ", "silver", "black", "Shinare's Quest Pieces\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="^ocbhelp rest$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>
				Note ( "\" )
				ColourNote ("lightblue", "black", "Resting\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       SLEEP\" )
				ColourNote ("white", "black",  "Syntax:       REST\" )
				Note ( "\" )
				ColourNote ("silver", "black", "These commands automatically gets your sleeping item out of\" )
				ColourNote ("silver", "black", "your bag and then sets you to rest or sleep with it. ", "red", "black", "This IS\" )
				ColourNote ("red", "black", "case sensitive.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       WAKE\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command automatically puts your sleeping item safely back\" )
				ColourNote ("silver", "black", "into your backpack as you wake. ", "red", "black", "This IS case sensitive.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="^orderset 6 (.*?)$"
				enabled="y"
				group="OCB_OrderSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("bag6", "%1")
				b6args=GetVariable ("bag6")
				if b6args == nil then
				ColourNote ("red", "black", "Bag 6 is not set!")
				else 
				ColourNote ("lime", "black", "Bag 6 is now set as "..b6args)
				end</send>
		</alias>
		<alias
				match="^ocbhelp search$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>
				Note ( "\" )
				ColourNote ("lightblue", "black", "Search\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       s'type'\" )
				ColourNote ("olive", "black", "Example:      sloot\" )
				ColourNote ("olive", "black", "Example:      smap\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command is the universal command used to list the items\" )
				ColourNote ("silver", "black", "in each of your bags.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("lightblue", "black", "Available Bag Types:\" )
				Note ( "\" )
				ColourNote ("olive", "black", "    Coup          ", "silver", "black", "Coupons\" )
				ColourNote ("olive", "black", "    Gear          ", "silver", "black", "Extra Gear\" )
				ColourNote ("olive", "black", "    Lance         ", "silver", "black", "Lancequest Pieces\" )
				ColourNote ("olive", "black", "    Loot          ", "silver", "black", "Unsorted Loot\" )
				ColourNote ("olive", "black", "    Main          ", "silver", "black", "Main Backpack Type\" )
				ColourNote ("olive", "black", "    Map           ", "silver", "black", "Maps\" )
				ColourNote ("olive", "black", "    Misc          ", "silver", "black", "Components, Collectables, Ect.\" )
				ColourNote ("olive", "black", "    Pot           ", "silver", "black", "Potions and Scrolls\" )
				ColourNote ("olive", "black", "    Shin          ", "silver", "black", "Shinare's Quest Pieces\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="^orderset 7 (.*?)$"
				enabled="y"
				group="OCB_OrderSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("bag7", "%1")
				b7args=GetVariable ("bag7")
				if b7args == nil then
				ColourNote ("red", "black", "Bag 7 is not set!")
				else 
				ColourNote ("lime", "black", "Bag 7 is now set as "..b7args)
				end</send>
		</alias>
		<alias
				match="^ocbhelp$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>ColourNote ("darkred", "grey", "***********************", "lightblue", "black", "Table of Contents","darkred", "grey", "************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       ocbhelp #\" )
				ColourNote ("white", "black",  "Syntax:       ocbhelp topic\" )
				Note ( "\" )
				ColourNote ("olive", "black", "  1. ", "white", "black", "How to use this plugin and what it does.\" )
				ColourNote ("olive", "black", "  2. ", "silver", "black", "How to set your bags.\" )
				ColourNote ("olive", "black", "  3. ", "white", "black", "How to set the order of your secondary bags.\" )
				ColourNote ("olive", "black", "  4. ", "silver", "black", "How to set the order of your items.\" )
				ColourNote ("olive", "black", "  5. ", "white", "black", "Main Commands.\" )
				ColourNote ("olive", "black", "  6. ", "silver", "black", "Quest Item Commands.\" )
				ColourNote ("olive", "black", "  7. ", "white", "black", "Utility Commands" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="^orderset 8 (.*?)$"
				enabled="y"
				group="OCB_OrderSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("bag8", "%1")
				b8args=GetVariable ("bag8")
				if b8args == nil then
				ColourNote ("red", "black", "Bag 8 is not set!")
				else 
				ColourNote ("lime", "black", "Bag 8 is now set as "..b8args)
				end</send>
		</alias>
		<alias
				match="^bedset (.*?)$"
				enabled="y"
				group="OCB_ItemSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("MyBed", "%1")
				bedargs=GetVariable ("MyBed")
				if bedargs == nil then
				ColourNote ("red", "black", "Bed is not set!")
				else 
				ColourNote ("lime", "black", "Bed is now set as "..bedargs)
				end</send>
		</alias>
		<alias
				match="dpot *"
				enabled="y"
				group="ocb_PotBag"
				send_to="12"
				sequence="100"
				>
			<send>potargs=GetVariable ("PotBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif potargs == nil then
				ColourNote ("red", "black", "Your Potions bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..potargs.." "..mainargs)
				Send ( "get %1 "..potargs)
				Send ( "drink %1" )
				Send ( "search "..potargs)
				Send ( "put "..potargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="epot *"
				enabled="y"
				group="ocb_PotBag"
				send_to="12"
				sequence="100"
				>
			<send>potargs=GetVariable ("PotBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif potargs == nil then
				ColourNote ("red", "black", "Your Potions bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..potargs.." "..mainargs)
				Send ( "get %1 "..potargs.." "..mainargs)
				Send ( "eat %1" )
				Send ( "search "..potargs)
				Send ( "put "..potargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="obox"
				enabled="y"
				group="ocb_ShinBag"
				send_to="12"
				sequence="100"
				>
			<send>shinargs=GetVariable ("ShinBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif shinargs == nil then
				ColourNote ("red", "black", "Your Shinare bag is not set!")
				else
				Send ("open "..mainargs)
				Send ( "get "..shinargs.." "..mainargs)
				Send ( "get all "..shinargs)
				Send ( "put all.lock "..shinargs)
				Send ( "put all.key "..shinargs)
				Send ( "put all.lid "..shinargs)
				Send ( "put all.slat "..shinargs)
				Send ( "put all.hinge "..shinargs)
				Send ( "get all.shinare "..shinargs)
				Send ( "put all.diamond "..shinargs)
				Send ( "put all.ruby "..shinargs)
				Send ( "put all.emerald "..shinargs)
				Send ( "put all.pearl "..shinargs)
				Send ( "put all.opal "..shinargs)
				Send ( "put all.garnet "..shinargs)
				Send ( "get all.box "..shinargs)
				Send ( "put all.box "..shinargs)
				Send ( "search "..shinargs)
				Send ( "put "..shinargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="pbox *"
				enabled="y"
				group="ocb_ShinBag"
				send_to="12"
				sequence="100"
				>
			<send>shinargs=GetVariable ("ShinBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif shinargs == nil then
				ColourNote ("red", "black", "Your Shinare bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..shinargs.." "..mainargs)
				Send ( "put %1 "..shinargs)
				Send ( "search "..shinargs)
				Send ( "put "..shinargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="sbox"
				enabled="y"
				group="ocb_ShinBag"
				send_to="12"
				sequence="100"
				>
			<send>shinargs=GetVariable ("ShinBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif shinargs == nil then
				ColourNote ("red", "black", "Your Shinare bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..shinargs.." "..mainargs)
				Send ( "get all.box "..shinargs)
				Send ( "search garnet" )
				Send ( "search opal" )
				Send ( "search pearl" )
				Send ( "search emerald" )
				Send ( "search ruby" )
				Send ( "search diamond" )
				Send ( "put all.box "..shinargs)
				Send ( "put "..shinargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^ocbhelp 2$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>Note ( "\" )
				ColourNote ("lightblue", "black", "How to set your bag variables.\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black", "Syntax:    set 'bag type' 'your bag'\" )
				ColourNote ("olive", "black", "Example:   set mainbag backpack\" )
				Note ( "\" )
				ColourNote ("silver", "black", "You should only have to set these once, unless you change bags.\" )
				ColourNote ("silver", "black", "This is a set of eight variables that must be set. You can\" )
				ColourNote ("silver", "black", "always set a single bag for many purposes, but it isn't\" )
				ColourNote ("silver", "black", "recommended.\" )
				Note ( "\" )
				ColourNote ("lightblue", "black", "Available Bag Types:\" )
				Note ( "\" )
				ColourNote ("olive", "black", "&#9;coupbag&#9;&#9;", "silver", "black", "Coupons\" )
				ColourNote ("olive", "black", "&#9;gearbag&#9;&#9;", "silver", "black", "Extra Gear\" )
				ColourNote ("olive", "black", "&#9;lancebag  &#9;", "silver", "black", "Lancequest Pieces\" )
				ColourNote ("olive", "black", "&#9;lootbag   &#9;", "silver", "black", "Unsorted Loot\" )
				ColourNote ("olive", "black", "&#9;mainbag   &#9;", "silver", "black", "Main Backpack Type\" )
				ColourNote ("olive", "black", "&#9;mapbag    &#9;", "silver", "black", "Maps\" )
				ColourNote ("olive", "black", "&#9;miscbag   &#9;", "silver", "black", "Components, Collectables, Ect.\" )
				ColourNote ("olive", "black", "&#9;potbag   &#9;", "silver", "black", "Potions and Scrolls\" )
				ColourNote ("olive", "black", "&#9;shinbag   &#9;", "silver", "black", "Shinare's Quest Pieces\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black", "Syntax:    ocbshow bags" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command will show you the order and keyword your bags are\" )
				ColourNote ("silver", "black", "set to.")
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black", "Syntax:    bagclear 'bag type'" )
				ColourNote ("olive", "black", "Example:   bagclear lootbag\" )
				Note ( "\" )
				ColourNote ("white", "black", "Syntax:    bagclear" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command will clear all or individual bag name variables.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" ) </send>
		</alias>
		<alias
				match="rtype *"
				enabled="y"
				group="ocb_TypeBag"
				send_to="12"
				sequence="100"
				>
			<send>mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get %1 "..mainargs)
				Send ( "read %1" )
				Send ( "put %1 "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^ocbhelp 3$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>Note ( "\" )
				ColourNote ("lightblue", "black", "How to set the order of the bags inside your Main Bag.\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black", "Syntax:    orderset 'order #' 'your bag'\" )
				ColourNote ("olive", "black", "Example:   orderset 1 sack\" )
				Note ( "\" )
				ColourNote ("silver", "black", "You may choose to order the bags inside of your Main Bag, or\" )
				ColourNote ("silver", "black", "you may also choose to let the plugin set them for you. If you\" )
				ColourNote ("silver", "black", "do not set these manually, they will be set in the order that\" )
				ColourNote ("silver", "black", "you set their keywords. The bags are ordered 1 through 7.\" )
				Note ( "\" )
				ColourNote ("red", "black", "IMPORTANT:\" )
				ColourNote ("silver", "black", "It is recommended that you do this AFTER you have set ALL of\" )
				ColourNote ("silver", "black", "your secondary bags to avoid accidentally resetting your \" )
				ColourNote ("silver", "black", "preferred order.\" )
				Note ( "\" )
				ColourNote ("red", "black", "DO NOT include your main bag.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black", "Syntax:    ocbshow bags" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command will show you the order and keyword your bags are\" )
				ColourNote ("silver", "black", "set to.")
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black", "Syntax:    orderclear 'slot #'" )
				ColourNote ("olive", "black", "Example:   orderclear 1\" )
				Note ( "\" )
				ColourNote ("white", "black", "Syntax:    orderclear" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command will clear all or individual bag order variables.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="^ocblist bags$"
				enabled="y"
				group="OCB_Utilities"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>mainargs=GetVariable ("MainBag")
				coupargs=GetVariable ("CoupBag")
				gearargs=GetVariable ("GearBag")
				lanceargs=GetVariable ("LanceBag")
				lootargs=GetVariable ("LootBag")
				mapargs=GetVariable ("MapBag")
				miscargs=GetVariable ("MiscBag")
				potargs=GetVariable ("PotBag")
				shinargs=GetVariable ("ShinBag")
				ColourNote ("silver", "black", "  Bag Type ", "darkred", "black", "********************* ", "silver", "black", "My Bag ", "darkred", "black", "************************\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				if mainargs == nil then
				ColourNote ("silver", "black", "  MainBag                      ", "darkred", "black", "*", "red", "black", " This bag has not been set.\")
				else
				ColourNote ("silver", "black", "  MainBag                      ", "darkred", "black", "*", "silver", "black", " " ..mainargs )
				end
				if coupargs == nil then
				ColourNote ("silver", "black", "  CoupBag                      ", "darkred", "black", "*", "red", "black", " This bag has not been set.\")
				else
				ColourNote ("silver", "black", "  CoupBag                      ", "darkred", "black", "*", "silver", "black", " " ..coupargs )
				end
				if gearargs == nil then
				ColourNote ("silver", "black", "  GearBag                      ", "darkred", "black", "*", "red", "black", " This bag has not been set.\")
				else
				ColourNote ("silver", "black", "  GearBag                      ", "darkred", "black", "*", "silver", "black", " " ..gearargs )
				end
				if lanceargs == nil then
				ColourNote ("silver", "black", "  LanceBag                     ", "darkred", "black", "*", "red", "black", " This bag has not been set.\")
				else
				ColourNote ("silver", "black", "  LanceBag                     ", "darkred", "black", "*", "silver", "black", " " ..lanceargs )
				end
				if lootargs == nil then
				ColourNote ("silver", "black", "  LootBag                      ", "darkred", "black", "*", "red", "black", " This bag has not been set.\")
				else
				ColourNote ("silver", "black", "  LootBag                      ", "darkred", "black", "*", "silver", "black", " " ..lootargs )
				end
				if mapargs == nil then
				ColourNote ("silver", "black", "  MapBag                       ", "darkred", "black", "*", "red", "black", " This bag has not been set.\")
				else
				ColourNote ("silver", "black", "  MapBag                       ", "darkred", "black", "*", "silver", "black", " " ..mapargs )
				end
				if miscargs == nil then
				ColourNote ("silver", "black", "  MiscBag                      ", "darkred", "black", "*", "red", "black", " This bag has not been set.\")
				else
				ColourNote ("silver", "black", "  MiscBag                      ", "darkred", "black", "*", "silver", "black", " "..miscargs )
				end
				if potargs == nil then
				ColourNote ("silver", "black", "  PotBag                       ", "darkred", "black", "*", "red", "black", " This bag has not been set.\")
				else
				ColourNote ("silver", "black", "  PotBag                       ", "darkred", "black", "*", "silver", "black", " " ..potargs )
				end
				if shinargs == nil then
				ColourNote ("silver", "black", "  ShinBag                      ", "darkred", "black", "*", "red", "black", " This bag has not been set.\")
				else
				ColourNote ("silver", "black", "  ShinBag                      ", "darkred", "black", "*", "silver", "black", " " ..shinargs )
				end

				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="^ocbhelp 4$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>Note ( "\" )
				ColourNote ("lightblue", "black", "How to set and order the items in your Main Bag.\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:    itemset 'order #' 'item'\" )
				ColourNote ("olive", "black", "Example:   itemset 1 tent\" )
				Note ( "\" )
				ColourNote ("silver", "black", "Some items are just better in the main bag, such as healing\" )
				ColourNote ("silver", "black", "potions, hearts and your tent. Possibly other things you may\" )
				ColourNote ("silver", "black", "wish to keep on hand. This plugin is set to accommodate items\" )
				ColourNote ("silver", "black", "1 through 5.\" )
				Note ( "\" )
				ColourNote ("red", "black", "NOTE:\" )
				ColourNote ("silver", "black", "These objects, unlike your secondary bags, MUST be ordered\" )
				ColourNote ("silver", "black", "manually if you wish for them to be returned to your Main Bag\" )
				ColourNote ("silver", "black", "when you use the 'obag' command.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:    bedset 'item'\" )
				ColourNote ("olive", "black", "Example:   bedset tent\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command designates an item for sleeping in. Note that\" )
				ColourNote ("silver", "black", "it must still be assigned a number in order to be returned to\" )
				ColourNote ("silver", "black", "the bag when ordered.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:    lightset 'item'\" )
				ColourNote ("olive", "black", "Example:   lightset torch\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command designates an item as your light and allows for \" )
				ColourNote ("silver", "black", "easy filling with fuel. This item does not need to be ordered.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:    'ocbshow items'\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command will show you what the current items set and what" )
				ColourNote ("silver", "black", "their set order is.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black", "Syntax:    itemclear 'item #'" )
				ColourNote ("olive", "black", "Example:   itemclear 3\" )
				Note ( "\" )
				ColourNote ("white", "black", "Syntax:    itemclear 'item'" )
				ColourNote ("olive", "black", "Example:   itemclear bed\" )
				Note ( "\" )
				ColourNote ("white", "black", "Syntax:    itemclear" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command will clear all or individual item related\" )
				ColourNote ("silver", "black", "variables.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="^ocbhelp 5$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>Note ( "\" )
				ColourNote ("lightblue", "black", "Bag Commands\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("silver", "black", "These commands allow you to work with the items inside of your\" )
				ColourNote ("silver", "black", "bags.\" )
				Note ( "\" )
				ColourNote ("white", "black", "For more information, see the following individual help topics:\" )
				Note ( "\" )
				ColourNote ("olive", "black", "  drink   loot   eat    get\" )
				ColourNote ("olive", "black", "  order   put    read   search\" )
				ColourNote ("olive", "black", "  compare        examine\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="^ocbhelp 6$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>Note ( "\" )
				ColourNote ("lightblue", "black", "Quest Commands\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("silver", "black", "These commands allow you to manage quest items with more ease.\" )
				Note ( "\" )
				ColourNote ("red", "black", "NOTE:\" )
				ColourNote ("silver", "black", "While this plugin can handle more than one. it is recommended \" )
				ColourNote ("silver", "black", "that you only keep ONE of each partial at a time to avoid\" )
				ColourNote ("silver", "black", "mixups.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       mbox 'type'" )
				ColourNote ("olive", "black", "Example:      mbox garnet\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       mfoot 'type'\" )
				ColourNote ("olive", "black", "Example:      mfoot rose\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       mknight 'type'\" )
				ColourNote ("olive", "black", "Example:      mknight crown\" )
				Note ( "\" )
				ColourNote ("silver", "black", "Filling an already present partial.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       bpart 'type'\" )
				ColourNote ("olive", "black", "Example:      bpart diamond\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       fpart 'type'\" )
				ColourNote ("olive", "black", "Example:      fpart crown\" ) 
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       kpart 'type'\" )
				ColourNote ("olive", "black", "Example:      kpart sword\" )
				Note ( "\" )
				ColourNote ("silver", "black", "Creating a partial and then fills it.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       sbox\" )
				ColourNote ("white", "black",  "Syntax:       slance\" )
				Note ( "\" )
				ColourNote ("silver", "black", "Search through partials to see what pieces they have.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )</send>
		</alias>
		<alias
				match="^itemset 1 (.*?)$"
				enabled="y"
				group="OCB_ItemSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("Item1", "%1")
				i1args=GetVariable ("Item1")
				if i1args == nil then
				ColourNote ("red", "black", "Item 1 is not set!")
				else 
				ColourNote ("lime", "black", "Item 1 is now set as "..i1args)
				end</send>
		</alias>
		<alias
				match="^itemset 2 (.*?)$"
				enabled="y"
				group="OCB_ItemSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("Item2", "%1")
				i2args=GetVariable ("Item2")
				if i2args == nil then
				ColourNote ("red", "black", "Item 2 is not set!")
				else 
				ColourNote ("lime", "black", "Item 2 is now set as "..i2args)
				end</send>
		</alias>
		<alias
				match="^itemset 3 (.*?)$"
				enabled="y"
				group="OCB_ItemSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("Item3", "%1")
				i3args=GetVariable ("Item3")
				if i3args == nil then
				ColourNote ("red", "black", "Item 3 is not set!")
				else 
				ColourNote ("lime", "black", "Item 3 is now set as "..i3args)
				end</send>
		</alias>
		<alias
				match="^itemset 4 (.*?)$"
				enabled="y"
				group="OCB_ItemSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("Item4", "%1")
				i4args=GetVariable ("Item4")
				if i4args == nil then
				ColourNote ("red", "black", "Item 4 is not set!")
				else 
				ColourNote ("lime", "black", "Item 4 is now set as "..i4args)
				end</send>
		</alias>
		<alias
				match="^itemset 5 (.*?)$"
				enabled="y"
				group="OCB_ItemSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("Item5", "%1")
				i5args=GetVariable ("Item5")
				if i5args == nil then
				ColourNote ("red", "black", "Item 5 is not set!")
				else 
				ColourNote ("lime", "black", "Item 5 is now set as "..i5args)
				end</send>
		</alias>
		<alias
				match="^ocblist items$"
				enabled="y"
				group="OCB_Utilities"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>i1args=GetVariable ("Item1")
				i2args=GetVariable ("Item2")
				i3args=GetVariable ("Item3")
				i4args=GetVariable ("Item4")
				i5args=GetVariable ("Item5")
				bedargs=GetVariable ("MyBed")
				lightargs=GetVariable ("MyLight")
				ColourNote ("darkred", "black", "*************************** ", "silver", "black", "My Bed ", "darkred", "black", "*****************************\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				if bedargs == nil then
				ColourNote ("red", "black", "                      A bed has not set.\")
				else
				ColourNote ("silver", "black", "                            " ..bedargs )
				end
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("darkred", "black", "************************** ", "silver", "black", "My Light ", "darkred", "black", "****************************\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				if lightargs == nil then
				ColourNote ("red", "black", "                     A light has not set.\")
				else
				ColourNote ("silver", "black", "                            " ..lightargs )
				end
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("silver", "black", "  Item Order ", "darkred", "black", "******************* ", "silver", "black", "Item ", "darkred", "black", "**************************\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				if i1args == nil then
				ColourNote ("silver", "black", "  1st Item                     ", "darkred", "black", "*", "red", "black", " This item slot is not set.\")
				else
				ColourNote ("silver", "black", "  1st Item                     ", "darkred", "black", "*", "silver", "black", " " ..i1args )
				end
				if i2args == nil then
				ColourNote ("silver", "black", "  2nd Item                     ", "darkred", "black", "*", "red", "black", " This item slot is not set.\")
				else
				ColourNote ("silver", "black", "  2nd Item                     ", "darkred", "black", "*", "silver", "black", " " ..i2args )
				end
				if i3args == nil then
				ColourNote ("silver", "black", "  3rd Item                     ", "darkred", "black", "*", "red", "black", " This item slot is not set.\")
				else
				ColourNote ("silver", "black", "  3rd Item                     ", "darkred", "black", "*", "silver", "black", " " ..i3args )
				end
				if i4args == nil then
				ColourNote ("silver", "black", "  4th Item                     ", "darkred", "black", "*", "red", "black", " This item slot is not set.\")
				else
				ColourNote ("silver", "black", "  4th Item                     ", "darkred", "black", "*", "silver", "black", " " ..i4args )
				end
				if i5args == nil then
				ColourNote ("silver", "black", "  5th Item                     ", "darkred", "black", "*", "red", "black", " This item slot is not set.\")
				else
				ColourNote ("silver", "black", "  5th Item                     ", "darkred", "black", "*", "silver", "black", " " ..i5args )
				end
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="^ocblist order$"
				enabled="y"
				group="OCB_Utilities"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>b1args=GetVariable ("bag1")
				b2args=GetVariable ("bag2")
				b3args=GetVariable ("bag3")
				b4args=GetVariable ("bag4")
				b5args=GetVariable ("bag5")
				b6args=GetVariable ("bag6")
				b7args=GetVariable ("bag7")
				b8args=GetVariable ("bag8")
				ColourNote ("silver", "black", "  Bag Order", "darkred", "black", " ********************", "silver", "black", " My Bag", "darkred", "black", " ************************\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				if b1args == nil then
				ColourNote ("silver", "black", "  1st Bag                      ", "darkred", "black", "*", "red", "black", " This bag slot is not set.\")
				else
				ColourNote ("silver", "black", "  1st Bag                      ", "darkred", "black", "*", "silver", "black", " " ..b1args )
				end
				if b2args == nil then
				ColourNote ("silver", "black", "  2nd Bag                      ", "darkred", "black", "*", "red", "black", " This bag slot is not set.\")
				else
				ColourNote ("silver", "black", "  2nd Bag                      ", "darkred", "black", "*", "silver", "black", " " ..b2args )
				end
				if b3args == nil then
				ColourNote ("silver", "black", "  3rd Bag                      ", "darkred", "black", "*", "red", "black", " This bag slot is not set.\")
				else
				ColourNote ("silver", "black", "  3rd Bag                      ", "darkred", "black", "*", "silver", "black", " " ..b3args )
				end
				if b4args == nil then
				ColourNote ("silver", "black", "  4th Bag                      ", "darkred", "black", "*", "red", "black", " This bag slot is not set.\")
				else
				ColourNote ("silver", "black", "  4th Bag                      ", "darkred", "black", "*", "silver", "black", " " ..b4args )
				end
				if b5args == nil then
				ColourNote ("silver", "black", "  5th Bag                      ", "darkred", "black", "*", "red", "black", " This bag slot is not set.\")
				else
				ColourNote ("silver", "black", "  5th Bag                      ", "darkred", "black", "*", "silver", "black", " " ..b5args )
				end
				if b6args == nil then
				ColourNote ("silver", "black", "  6th Bag                      ", "darkred", "black", "*", "red", "black", " This bag slot is not set.\")
				else
				ColourNote ("silver", "black", "  6th Bag                      ", "darkred", "black", "*", "silver", "black", " " ..b6args )
				end
				if b7args == nil then
				ColourNote ("silver", "black", "  7th Bag                      ", "darkred", "black", "*", "red", "black", " This bag slot is not set.\")
				else
				ColourNote ("silver", "black", "  7th Bag                      ", "darkred", "black", "*", "silver", "black", " " ..b7args )
				end
				if b8args == nil then
				ColourNote ("silver", "black", "  8th Bag                      ", "darkred", "black", "*", "red", "black", " This bag slot is not set.\")
				else
				ColourNote ("silver", "black", "  8th Bag                      ", "darkred", "black", "*", "silver", "black", " " ..b8args )
				end

				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
			</send>
		</alias>

		<alias
				match="^ocbhelp 7$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>Note ( "\" )
				ColourNote ("lightblue", "black", "Utility Commands\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("silver", "black", "These commands allow you to do little extras as well as\" )
				ColourNote ("silver", "black", "display and set information such as variables.\" )
				Note ( "\" )
				ColourNote ("silver", "black", "For more information, see the following individual help topics:\" )
				Note ( "\" )
				ColourNote ("olive", "black", "  list   rest\" )
				ColourNote ("olive", "black", "  loot    money\" )
				ColourNote ("olive", "black", "  light\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="dcash * *"
				enabled="y"
				group="ocb_Utilities"
				send_to="12"
				sequence="100"
				>
			<send>mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Main bag is not set!")
				else 
				Send("open "..mainargs)
				Send("put %1 %2 "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^ocbhelp compare$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>
				Note ( "\" )
				ColourNote ("lightblue", "black", "Reading, Examine and Compare\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       r'type' item\")
				ColourNote ("olive", "black", "Example:      rmap neraka\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       x'type' item\")
				ColourNote ("olive", "black", "Example:      xcoup rpa\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       c'type' item\")
				ColourNote ("olive", "black", "Example:      cloot shield\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command allows you to read, compare or examine an item\" )
				ColourNote ("silver", "black", "from your bags with ease. Note that you must manually get items\" )
				ColourNote ("silver", "black", "to compare them to themselves, still.\")
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("lightblue", "black", "Available Bag Types:\" )
				Note ( "\" )
				ColourNote ("olive", "black", "    Coup          ", "silver", "black", "Coupons\" )
				ColourNote ("olive", "black", "    Gear          ", "silver", "black", "Extra Gear\" )
				ColourNote ("olive", "black", "    Lance         ", "silver", "black", "Lancequest Pieces\" )
				ColourNote ("olive", "black", "    Loot          ", "silver", "black", "Unsorted Loot\" )
				ColourNote ("olive", "black", "    Main          ", "silver", "black", "Main Backpack Type\" )
				ColourNote ("olive", "black", "    Map           ", "silver", "black", "Maps\" )
				ColourNote ("olive", "black", "    Misc          ", "silver", "black", "Components, Collectables, Ect.\" )
				ColourNote ("olive", "black", "    Pot           ", "silver", "black", "Potions and Scrolls\" )
				ColourNote ("olive", "black", "    Shin          ", "silver", "black", "Shinare's Quest Pieces\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="dtrash"
				enabled="y"
				group="ocb_Utilities"
				send_to="12"
				sequence="100"
				>
			<send>lootargs=GetVariable ("LootBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif lootargs == nil then
				ColourNote ("red", "black", "Your Loot bag is not set!")
				else
				Send("drop all.flask")
				Send("drop all.jug")
				Send("drop all.wine")
				Send("drop all.water")
				Send("drop all.canteen")
				Send("drop all.gourd")
				Send("drop all.food")
				Send("get all.food")
				Send("open "..mainargs)
				Send("get "..lootargs.." "..mainargs)
				Send("open "..lootargs)
				Send("put all.compon "..lootargs)
				Send("put all.figur "..lootargs)
				Send("put all.die "..lootargs)
				Send("put all.tile "..lootargs)
				Send("put all.statu "..lootargs)
				Send("put all.rand "..lootargs)
				Send("close "..lootargs)
				Send("put "..lootargs.." "..mainargs)
				Send("close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^ocbhelp eat$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>
				Note ( "\" )
				ColourNote ("lightblue", "black", "Eat and Drink\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       e'type' item\" )
				ColourNote ("white", "black",  "Syntax:       d'type' item\" )
				ColourNote ("olive", "black", "Example:      ecoup home\" )
				ColourNote ("olive", "black", "Example:      dpot recall\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command is the universal command used to get items from\" )
				ColourNote ("silver", "black", "your bag and immediately eat or drink them.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("lightblue", "black", "Available Bag Types:\" )
				Note ( "\" )
				ColourNote ("olive", "black", "    Coup          ", "silver", "black", "Coupons\" )
				ColourNote ("olive", "black", "    Main          ", "silver", "black", "Main Backpack Type\" )
				ColourNote ("olive", "black", "    Misc          ", "silver", "black", "Components, Collectables, Ect.\" )
				ColourNote ("olive", "black", "    Pot           ", "silver", "black", "Potions and Scrolls\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="^ocbhelp examine$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>
				Note ( "\" )
				ColourNote ("lightblue", "black", "Reading, Examine and Compare\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       r'type' item\"
				ColourNote ("olive", "black", "Example:      rmap neraka\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       x'type' item\"
				ColourNote ("olive", "black", "Example:      xcoup rpa\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       c'type' item\"
				ColourNote ("olive", "black", "Example:      cloot shield\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command allows you to read, compare or examine an item\" )
				ColourNote ("silver", "black", "from your bags with ease. Note that you must manually get items\" )
				ColourNote ("silver", "black", "to compare them to themselves, still.\")
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("lightblue", "black", "Available Bag Types:\" )
				Note ( "\" )
				ColourNote ("olive", "black", "    Coup          ", "silver", "black", "Coupons\" )
				ColourNote ("olive", "black", "    Gear          ", "silver", "black", "Extra Gear\" )
				ColourNote ("olive", "black", "    Lance         ", "silver", "black", "Lancequest Pieces\" )
				ColourNote ("olive", "black", "    Loot          ", "silver", "black", "Unsorted Loot\" )
				ColourNote ("olive", "black", "    Main          ", "silver", "black", "Main Backpack Type\" )
				ColourNote ("olive", "black", "    Map           ", "silver", "black", "Maps\" )
				ColourNote ("olive", "black", "    Misc          ", "silver", "black", "Components, Collectables, Ect.\" )
				ColourNote ("olive", "black", "    Pot           ", "silver", "black", "Potions and Scrolls\" )
				ColourNote ("olive", "black", "    Shin          ", "silver", "black", "Shinare's Quest Pieces\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="^ocbhelp get$"
				enabled="y"
				group="OCB_Help"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>
				Note ( "\" )
				ColourNote ("lightblue", "black", "Get\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("white", "black",  "Syntax:       g'type' item\" )
				ColourNote ("white", "black",  "Syntax:       g'type' all.item\" )
				ColourNote ("olive", "black", "Example:      ggear leggings\" )
				ColourNote ("olive", "black", "Example:      gpot all.sanc\" )
				Note ( "\" )
				ColourNote ("silver", "black", "This command is the universal command used to get items from\" )
				ColourNote ("silver", "black", "each of your bags.\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				ColourNote ("silver", "black", "Available Bag Types::\" )
				Note ( "\" )
				ColourNote ("olive", "black", "    Coup          ", "silver", "black", "Coupons\" )
				ColourNote ("olive", "black", "    Gear          ", "silver", "black", "Extra Gear\" )
				ColourNote ("olive", "black", "    Lance         ", "silver", "black", "Lancequest Pieces\" )
				ColourNote ("olive", "black", "    Loot          ", "silver", "black", "Unsorted Loot\" )
				ColourNote ("olive", "black", "    Main          ", "silver", "black", "Main Backpack Type\" )
				ColourNote ("olive", "black", "    Map           ", "silver", "black", "Maps\" )
				ColourNote ("olive", "black", "    Misc          ", "silver", "black", "Components, Collectables, Ect.\" )
				ColourNote ("olive", "black", "    Pot           ", "silver", "black", "Potions and Scrolls\" )
				ColourNote ("olive", "black", "    Shin          ", "silver", "black", "Shinare's Quest Pieces\" )
				Note ( "\" )
				ColourNote ("darkred", "grey", "****************************************************************\" )
				Note ( "\" )
				Note ( "\" )
			</send>
		</alias>
		<alias
				match="^lightset (.*?)$"
				enabled="y"
				group="OCB_ItemSet"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>SetVariable("MyLight", "%1")
				lightargs=GetVariable ("MyLight")
				if lightargs == nil then
				ColourNote ("red", "black", "Light is not set!")
				else 
				ColourNote ("lime", "black", "Light is now set as "..lightargs)
				end</send>
		</alias>
		<alias
				match="glance *"
				enabled="y"
				group="ocb_LBag"
				send_to="12"
				sequence="100"
				>
			<send>lanceargs=GetVariable ("LanceBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif lanceargs == nil then
				ColourNote ("red", "black", "Your Lance bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..lanceargs.." "..mainargs)
				Send ( "get %1 "..lanceargs)
				Send ( "put "..lanceargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="llance"
				enabled="y"
				group="ocb_LBag"
				send_to="12"
				sequence="100"
				>
			<send>lanceargs=GetVariable ("LanceBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif lanceargs == nil then
				ColourNote ("red", "black", "Your Lance bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..lanceargs.." "..mainargs)
				Send ( "search "..lanceargs)
				Send ( "put "..lanceargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="olance"
				enabled="y"
				group="ocb_LBag"
				send_to="12"
				sequence="100"
				>
			<send>lanceargs=GetVariable ("LanceBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif lanceargs == nil then
				ColourNote ("red", "black", "Your Lance bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get spear "..mainargs)
				Send ( "get all "..lanceargs)
				Send ( "put all.cap "..lanceargs)
				Send ( "put all.clamp "..lanceargs)
				Send ( "put all.dragonshield "..lanceargs)
				Send ( "put all.lance "..lanceargs)
				Send ( "put all.mount "..lanceargs)
				Send ( "put all.pin "..lanceargs)
				Send ( "put all.post "..lanceargs)
				Send ( "put all.sleeve "..lanceargs)
				Send ( "get all "..lanceargs)
				Send ( "put all.rose "..lanceargs)
				Send ( "put all.crown "..lanceargs)
				Send ( "put all.sword "..lanceargs)
				Send ( "get all.part "..lanceargs)
				Send ( "put all.part "..lanceargs)
				Send ( "get all "..lanceargs)
				Send ( "put all.knight "..lanceargs)
				Send ( "put all.foot "..lanceargs)
				Send ( "search "..lanceargs)
				Send ( "put "..lanceargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="plance *"
				enabled="y"
				group="ocb_LBag"
				send_to="12"
				sequence="100"
				>
			<send>lanceargs=GetVariable ("LanceBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("red", "black", "Your Main bag is not set!")
				elseif lanceargs == nil then
				ColourNote ("red", "black", "Your Lance bag is not set!")
				else
				Send ( "open "..mainargs)
				Send ( "get "..lanceargs.." "..mainargs)
				Send ( "put %1 "..lanceargs)
				Send ( "search "..lanceargs)
				Send ( "put "..lanceargs.." "..mainargs)
				Send ( "close "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^orderclear$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag1")
				DeleteVariable("bag2")
				DeleteVariable("bag3")
				DeleteVariable("bag4")
				DeleteVariable("bag5")
				DeleteVariable("bag6")
				DeleteVariable("bag7")
				DeleteVariable("bag8")
				b8args=GetVariable ("bag2")
				b7args=GetVariable ("bag3")
				b6args=GetVariable ("bag4")
				b5args=GetVariable ("bag5")
				b4args=GetVariable ("bag6")
				b3args=GetVariable ("bag7")
				b2args=GetVariable ("bag8")
				b1args=GetVariable ("bag1")
				if b1args == nil then
				ColourNote ("lightblue", "black", "Bag slot 1 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 1 is still set as "..b1args)
				end

				if b2args == nil then
				ColourNote ("lightblue", "black", "Bag slot 2 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 2 is still set as "..b2args)
				end
				if b3args == nil then
				ColourNote ("lightblue", "black", "Bag slot 3 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 3 is still set as "..b3args)
				end
				if b4args == nil then
				ColourNote ("lightblue", "black", "Bag slot 4 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 4 is still set as "..b4args)
				end
				if b5args == nil then
				ColourNote ("lightblue", "black", "Bag slot 5 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 5 is still set as "..b5args)
				end
				if b6args == nil then
				ColourNote ("lightblue", "black", "Bag slot 6 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 6 is still set as "..b6args)
				end
				if b7args == nil then
				ColourNote ("lightblue", "black", "Bag slot 7 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 7 is still set as "..b7args)
				end
				if b8args == nil then
				ColourNote ("lightblue", "black", "Bag slot 8 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 8 is still set as "..b8args)
				end
			</send>
		</alias>
		<alias
				match="^bagclear$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("CoupBag")
				DeleteVariable("GearBag")
				DeleteVariable("LootBag")
				DeleteVariable("LanceBag")
				DeleteVariable("ShinBag")
				DeleteVariable("MiscBag")
				DeleteVariable("MapBag")
				DeleteVariable("Potbag")
				DeleteVariable("MainBag")
				gearargs=GetVariable ("GearBag")
				lootargs=GetVariable ("LootBag")
				coupargs=GetVariable ("CoupBag")
				lanceargs=GetVariable ("LanceBag")
				shinargs=GetVariable ("ShinBag")
				miscargs=GetVariable ("MiscBag")
				mapargs=GetVariable ("MapBag")
				potargs=GetVariable ("PotBag")
				mainargs=GetVariable ("MainBag")

				if coupargs == nil then
				ColourNote ("lightblue", "black", "Coupon bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..coupargs)
				end

				if gearargs == nil then
				ColourNote ("lightblue", "black", "Gear bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..gearargs)
				end
				if lootargs == nil then
				ColourNote ("lightblue", "black", "Loot bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..lootargs)
				end
				if lanceargs == nil then
				ColourNote ("lightblue", "black", "Lancequest bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..lanceargs)
				end
				if shinargs == nil then
				ColourNote ("lightblue", "black", "Shinare bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..shinargs)
				end
				if miscargs == nil then
				ColourNote ("lightblue", "black", "Miscellaneous bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..miscargs)
				end
				if mapargs == nil then
				ColourNote ("lightblue", "black", "Map bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..mapargs)
				end
				if potargs == nil then
				ColourNote ("lightblue", "black", "Potions bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..potargs)
				end
				if mainargs == nil then
				ColourNote ("lightblue", "black", "Main bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^itemclear$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("Item1")
				DeleteVariable("Item2")
				DeleteVariable("Item3")
				DeleteVariable("Item4")
				DeleteVariable("Item5")
				DeleteVariable("MyBed")
				DeleteVariable("MyLight")
				i1args=GetVariable ("Item1")
				i2args=GetVariable ("Item2")
				i3args=GetVariable ("Item3")
				i4args=GetVariable ("Item4")
				i5args=GetVariable ("Item5")
				bedargs=GetVariable ("MyBed")
				lightargs=GetVariable ("MyLight")

				if i1args == nil then
				ColourNote ("lightblue", "black", "Item slot 1 is now clear!")
				else 
				ColourNote ("red", "black", "Item slot 1 is still set as "..i1args)
				end

				if i2args == nil then
				ColourNote ("lightblue", "black", "Item slot 2 is now clear!")
				else 
				ColourNote ("red", "black", "Item slot 2 is still set as "..i2args)
				end
				if i3args == nil then
				ColourNote ("lightblue", "black", "Item slot 3 is now clear!")
				else 
				ColourNote ("red", "black", "Item slot 3 is still set as "..i3args)
				end
				if i4args == nil then
				ColourNote ("lightblue", "black", "Item slot 4 is now clear!")
				else 
				ColourNote ("red", "black", "Item slot 4 is still set as "..i4args)
				end
				if i5args == nil then
				ColourNote ("lightblue", "black", "Item slot 5 is now clear!")
				else 
				ColourNote ("red", "black", "Item slot 5 is still set as "..i5args)
				end
				if lightargs == nil then
				ColourNote ("lightblue", "black", "Your light has been cleared!")
				else 
				ColourNote ("red", "black", "Your light is still set as "..lightargs)
				end
				if bedargs == nil then
				ColourNote ("lightblue", "black", "Your bed has been cleared!")
				else 
				ColourNote ("red", "black", "Your bed  is still set as "..bedargs)
				end
			</send>
		</alias> 
		<alias
				match="^orderclear 1$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag1")
				b1args=GetVariable ("bag1")
				if b1args == nil then
				ColourNote ("lightblue", "black", "Bag 1 is now clear!")
				else 
				ColourNote ("red", "black","Bag 1 is still set as "..b1args)
				end</send>
		</alias>
		<alias
				match="^orderclear 2$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag2")
				b2args=GetVariable ("bag2")
				if b2args == nil then
				ColourNote ("lightblue", "black", "Bag 2 is now clear!")
				else 
				ColourNote ("red", "black","Bag 2 is still set as "..b2args)
				end</send>
		</alias>
		<alias
				match="^orderclear 3$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag3")
				b3args=GetVariable ("bag3")
				if b3args == nil then
				ColourNote ("lightblue", "black", "Bag 3 is now clear!")
				else 
				ColourNote ("red", "black","Bag 3 is still set as "..b3args)
				end</send>
		</alias>
		<alias
				match="^orderclear 4$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag4")
				b4args=GetVariable ("bag4")
				if b4args == nil then
				ColourNote ("lightblue", "black", "Bag 4 is now clear!")
				else 
				ColourNote ("red", "black","Bag 4 is still set as "..b4args)
				end</send>
		</alias>
		<alias
				match="^orderclear 5$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag5")
				b5args=GetVariable ("bag5")
				if b5args == nil then
				ColourNote ("lightblue", "black", "Bag 5 is now clear!")
				else 
				ColourNote ("red", "black","Bag 5 is still set as "..b5args)
				end</send>
		</alias>
		<alias
				match="^orderclear 6$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag6")
				b6args=GetVariable ("bag6")
				if b6args == nil then
				ColourNote ("lightblue", "black", "Bag 6 is now clear!")
				else 
				ColourNote ("red", "black","Bag 6 is still set as "..b6args)
				end</send>
		</alias>
		<alias
				match="^orderclear 7$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag7")
				b7args=GetVariable ("bag7")
				if b7args == nil then
				ColourNote ("lightblue", "black", "Bag 7 is now clear!")
				else 
				ColourNote ("red", "black","Bag 7 is still set as "..b7args)
				end</send>
		</alias>
		<alias
				match="^orderclear 8$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag8")
				b8args=GetVariable ("bag8")
				if b8args == nil then
				ColourNote ("lightblue", "black", "Bag 8 is now clear!")
				else 
				ColourNote ("red", "black","Bag 8 is still set as "..b8args)
				end</send>
		</alias>  
		<alias
				match="^clear coupbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("CoupBag")
				coupargs=GetVariable ("CoupBag")
				if coupargs == nil then
				ColourNote ("lightblue", "black", "Coupon bag is now clear!")
				else 
				ColourNote ("red", "black", "Coupon bag is still set as "..coupargs)
				end</send>
		</alias>
		<alias
				match="^clear gearbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("GearBag")
				gearargs=GetVariable ("GearBag")
				if gearargs == nil then
				ColourNote ("lightblue", "black", "Gear bag is now clear!")
				else 
				ColourNote ("red", "black", "Gear bag is still set as "..gearargs)
				end</send>
		</alias>
		<alias
				match="^clear lancebag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("LanceBag")
				lanceargs=GetVariable ("LanceBag")
				if lanceargs == nil then
				ColourNote ("lightblue", "black", "Lance bag is now clear!")
				else 
				ColourNote ("red", "black", "Lance bag is still set as "..lanceargs)
				end</send>
		</alias>
		<alias
				match="^clear lootbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("LootBag")
				lootargs=GetVariable ("LootBag")
				if lootargs == nil then
				ColourNote ("lightblue", "black", "Loot bag is now clear!")
				else 
				ColourNote ("red", "black", "Loot bag is still set as "..lootargs)
				end</send>
		</alias>
		<alias
				match="^clear mainbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("MainBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("lightblue", "black", "Main bag is now clear!")
				else 
				ColourNote ("red", "black", "Main bag is still set as "..mainargs)
				end</send>
		</alias>
		<alias
				match="^clear mapbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("MapBag")
				mapargs=GetVariable ("MapBag")
				if mapargs == nil then
				ColourNote ("lightblue", "black", "Map bag is now clear!")
				else 
				ColourNote ("red", "black", "Map bag is still set as "..mapargs)
				end</send>
		</alias>
		<alias
				match="^clear miscbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("MiscBag")
				miscargs=GetVariable ("MiscBag")
				if miscargs == nil then
				ColourNote ("lightblue", "black", "Miscellaneous bag is now clear!")
				else 
				ColourNote ("red", "black", "Miscellaneous bag is still set as "..miscargs)
				end</send>
		</alias>
		<alias
				match="^clear potbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("PotBag")
				potargs=GetVariable ("PotBag")
				if potargs == nil then
				ColourNote ("lightblue", "black", "Potion bag is now clear!")
				else 
				ColourNote ("red", "black", "Potion bag is still set as "..potargs)
				end</send>
		</alias>

		<alias
				match="^clear shinbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("ShinBag")
				shinargs=GetVariable ("ShinBag")
				if shinargs == nil then
				ColourNote ("lightblue", "black", "Shinare bag is now clear!")
				else 
				ColourNote ("red", "black", "Shinare bag is still set as "..shinargs)
				end</send>
		</alias>
		<alias
				match="^bedclear$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("MyBed")
				bedargs=GetVariable ("MyBed")
				if bedargs == nil then
				ColourNote ("lightblue", "black", "Your bed is now clear!")
				else 
				ColourNote ("red", "black", "Your bed is still set as "..bedargs)
				end</send>
		</alias>
		<alias
				match="^lightclear$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("MyLight")
				lightargs=GetVariable ("MyLight")
				if lightargs == nil then
				ColourNote ("lightblue", "black", "Your light is now clear!")
				else 
				ColourNote ("red", "black", "Your light is still set as "..lightargs)
				end</send>
		</alias>
		<alias
				match="^itemclear 1$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("Item1")
				i1args=GetVariable ("Item1")
				if i1args == nil then
				ColourNote ("lightblue", "black", "Item 1 is now clear!")
				else 
				ColourNote ("red", "black", "Item 1 is still set as "..i1args)
				end</send>
		</alias>
		<alias
				match="^itemclear 2$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("Item2")
				i2args=GetVariable ("Item2")
				if i2args == nil then
				ColourNote ("lightblue", "black", "Item 2 is now clear!")
				else 
				ColourNote ("red", "black", "Item 2 is still set as "..i2args)
				end</send>
		</alias>
		<alias
				match="^itemclear 3$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("Item3")
				i3args=GetVariable ("Item3")
				if i3args == nil then
				ColourNote ("lightblue", "black", "Item 3 is now clear!")
				else 
				ColourNote ("red", "black", "Item 3 is still set as "..i3args)
				end</send>
		</alias>
		<alias
				match="^itemclear 4$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("Item4")
				i4args=GetVariable ("Item4")
				if i4args == nil then
				ColourNote ("lightblue", "black", "Item 4 is now clear!")
				else 
				ColourNote ("red", "black", "Item 4 is still set as "..i4args)
				end</send>
		</alias>
		<alias
				match="^itemclear 5$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("Item5")
				i5args=GetVariable ("Item5")
				if i5args == nil then
				ColourNote ("lightblue", "black", "Item 5 is now clear!")
				else 
				ColourNote ("red", "black", "Item 5 is still set as "..i5args)
				end</send>
		</alias>
		<alias
				match="^orderclear$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag1")
				DeleteVariable("bag2")
				DeleteVariable("bag3")
				DeleteVariable("bag4")
				DeleteVariable("bag5")
				DeleteVariable("bag6")
				DeleteVariable("bag7")
				DeleteVariable("bag8")
				b8args=GetVariable ("bag2")
				b7args=GetVariable ("bag3")
				b6args=GetVariable ("bag4")
				b5args=GetVariable ("bag5")
				b4args=GetVariable ("bag6")
				b3args=GetVariable ("bag7")
				b2args=GetVariable ("bag8")
				b1args=GetVariable ("bag1")
				if b1args == nil then
				ColourNote ("lightblue", "black", "Bag slot 1 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 1 is still set as "..b1args)
				end

				if b2args == nil then
				ColourNote ("lightblue", "black", "Bag slot 2 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 2 is still set as "..b2args)
				end
				if b3args == nil then
				ColourNote ("lightblue", "black", "Bag slot 3 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 3 is still set as "..b3args)
				end
				if b4args == nil then
				ColourNote ("lightblue", "black", "Bag slot 4 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 4 is still set as "..b4args)
				end
				if b5args == nil then
				ColourNote ("lightblue", "black", "Bag slot 5 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 5 is still set as "..b5args)
				end
				if b6args == nil then
				ColourNote ("lightblue", "black", "Bag slot 6 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 6 is still set as "..b6args)
				end
				if b7args == nil then
				ColourNote ("lightblue", "black", "Bag slot 7 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 7 is still set as "..b7args)
				end
				if b8args == nil then
				ColourNote ("lightblue", "black", "Bag slot 8 has been cleared!")
				else 
				ColourNote ("red", "black", "Bag 8 is still set as "..b8args)
				end
			</send>
		</alias>
		<alias
				match="^bagclear$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("CoupBag")
				DeleteVariable("GearBag")
				DeleteVariable("LootBag")
				DeleteVariable("LanceBag")
				DeleteVariable("ShinBag")
				DeleteVariable("MiscBag")
				DeleteVariable("MapBag")
				DeleteVariable("Potbag")
				DeleteVariable("MainBag")
				gearargs=GetVariable ("GearBag")
				lootargs=GetVariable ("LootBag")
				coupargs=GetVariable ("CoupBag")
				lanceargs=GetVariable ("LanceBag")
				shinargs=GetVariable ("ShinBag")
				miscargs=GetVariable ("MiscBag")
				mapargs=GetVariable ("MapBag")
				potargs=GetVariable ("PotBag")
				mainargs=GetVariable ("MainBag")

				if coupargs == nil then
				ColourNote ("lightblue", "black", "Coupon bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..coupargs)
				end

				if gearargs == nil then
				ColourNote ("lightblue", "black", "Gear bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..gearargs)
				end
				if lootargs == nil then
				ColourNote ("lightblue", "black", "Loot bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..lootargs)
				end
				if lanceargs == nil then
				ColourNote ("lightblue", "black", "Lancequest bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..lanceargs)
				end
				if shinargs == nil then
				ColourNote ("lightblue", "black", "Shinare bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..shinargs)
				end
				if miscargs == nil then
				ColourNote ("lightblue", "black", "Miscellaneous bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..miscargs)
				end
				if mapargs == nil then
				ColourNote ("lightblue", "black", "Map bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..mapargs)
				end
				if potargs == nil then
				ColourNote ("lightblue", "black", "Potions bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..potargs)
				end
				if mainargs == nil then
				ColourNote ("lightblue", "black", "Main bag slot has been cleared!")
				else 
				ColourNote ("red", "black", "Bag is still set as "..mainargs)
				end
			</send>
		</alias>
		<alias
				match="^itemclear$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("Item1")
				DeleteVariable("Item2")
				DeleteVariable("Item3")
				DeleteVariable("Item4")
				DeleteVariable("Item5")
				DeleteVariable("MyBed")
				DeleteVariable("MyLight")
				i1args=GetVariable ("Item1")
				i2args=GetVariable ("Item2")
				i3args=GetVariable ("Item3")
				i4args=GetVariable ("Item4")
				i5args=GetVariable ("Item5")
				bedargs=GetVariable ("MyBed")
				lightargs=GetVariable ("MyLight")

				if i1args == nil then
				ColourNote ("lightblue", "black", "Item slot 1 is now clear!")
				else 
				ColourNote ("red", "black", "Item slot 1 is still set as "..i1args)
				end

				if i2args == nil then
				ColourNote ("lightblue", "black", "Item slot 2 is now clear!")
				else 
				ColourNote ("red", "black", "Item slot 2 is still set as "..i2args)
				end
				if i3args == nil then
				ColourNote ("lightblue", "black", "Item slot 3 is now clear!")
				else 
				ColourNote ("red", "black", "Item slot 3 is still set as "..i3args)
				end
				if i4args == nil then
				ColourNote ("lightblue", "black", "Item slot 4 is now clear!")
				else 
				ColourNote ("red", "black", "Item slot 4 is still set as "..i4args)
				end
				if i5args == nil then
				ColourNote ("lightblue", "black", "Item slot 5 is now clear!")
				else 
				ColourNote ("red", "black", "Item slot 5 is still set as "..i5args)
				end
				if lightargs == nil then
				ColourNote ("lightblue", "black", "Your light has been cleared!")
				else 
				ColourNote ("red", "black", "Your light is still set as "..lightargs)
				end
				if bedargs == nil then
				ColourNote ("lightblue", "black", "Your bed has been cleared!")
				else 
				ColourNote ("red", "black", "Your bed  is still set as "..bedargs)
				end
			</send>
		</alias> 
		<alias
				match="^orderclear 1$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag1")
				b1args=GetVariable ("bag1")
				if b1args == nil then
				ColourNote ("lightblue", "black", "Bag 1 is now clear!")
				else 
				ColourNote ("red", "black","Bag 1 is still set as "..b1args)
				end</send>
		</alias>
		<alias
				match="^orderclear 2$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag2")
				b2args=GetVariable ("bag2")
				if b2args == nil then
				ColourNote ("lightblue", "black", "Bag 2 is now clear!")
				else 
				ColourNote ("red", "black","Bag 2 is still set as "..b2args)
				end</send>
		</alias>
		<alias
				match="^orderclear 3$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag3")
				b3args=GetVariable ("bag3")
				if b3args == nil then
				ColourNote ("lightblue", "black", "Bag 3 is now clear!")
				else 
				ColourNote ("red", "black","Bag 3 is still set as "..b3args)
				end</send>
		</alias>
		<alias
				match="^orderclear 4$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag4")
				b4args=GetVariable ("bag4")
				if b4args == nil then
				ColourNote ("lightblue", "black", "Bag 4 is now clear!")
				else 
				ColourNote ("red", "black","Bag 4 is still set as "..b4args)
				end</send>
		</alias>
		<alias
				match="^orderclear 5$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag5")
				b5args=GetVariable ("bag5")
				if b5args == nil then
				ColourNote ("lightblue", "black", "Bag 5 is now clear!")
				else 
				ColourNote ("red", "black","Bag 5 is still set as "..b5args)
				end</send>
		</alias>
		<alias
				match="^orderclear 6$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag6")
				b6args=GetVariable ("bag6")
				if b6args == nil then
				ColourNote ("lightblue", "black", "Bag 6 is now clear!")
				else 
				ColourNote ("red", "black","Bag 6 is still set as "..b6args)
				end</send>
		</alias>
		<alias
				match="^orderclear 7$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag7")
				b7args=GetVariable ("bag7")
				if b7args == nil then
				ColourNote ("lightblue", "black", "Bag 7 is now clear!")
				else 
				ColourNote ("red", "black","Bag 7 is still set as "..b7args)
				end</send>
		</alias>
		<alias
				match="^orderclear 8$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("bag8")
				b8args=GetVariable ("bag8")
				if b8args == nil then
				ColourNote ("lightblue", "black", "Bag 8 is now clear!")
				else 
				ColourNote ("red", "black","Bag 8 is still set as "..b8args)
				end</send>
		</alias>  
		<alias
				match="^clear coupbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("CoupBag")
				coupargs=GetVariable ("CoupBag")
				if coupargs == nil then
				ColourNote ("lightblue", "black", "Coupon bag is now clear!")
				else 
				ColourNote ("red", "black", "Coupon bag is still set as "..coupargs)
				end</send>
		</alias>
		<alias
				match="^clear gearbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("GearBag")
				gearargs=GetVariable ("GearBag")
				if gearargs == nil then
				ColourNote ("lightblue", "black", "Gear bag is now clear!")
				else 
				ColourNote ("red", "black", "Gear bag is still set as "..gearargs)
				end</send>
		</alias>
		<alias
				match="^clear lancebag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("LanceBag")
				lanceargs=GetVariable ("LanceBag")
				if lanceargs == nil then
				ColourNote ("lightblue", "black", "Lance bag is now clear!")
				else 
				ColourNote ("red", "black", "Lance bag is still set as "..lanceargs)
				end</send>
		</alias>
		<alias
				match="^clear lootbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("LootBag")
				lootargs=GetVariable ("LootBag")
				if lootargs == nil then
				ColourNote ("lightblue", "black", "Loot bag is now clear!")
				else 
				ColourNote ("red", "black", "Loot bag is still set as "..lootargs)
				end</send>
		</alias>
		<alias
				match="^clear mainbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("MainBag")
				mainargs=GetVariable ("MainBag")
				if mainargs == nil then
				ColourNote ("lightblue", "black", "Main bag is now clear!")
				else 
				ColourNote ("red", "black", "Main bag is still set as "..mainargs)
				end</send>
		</alias>
		<alias
				match="^clear mapbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("MapBag")
				mapargs=GetVariable ("MapBag")
				if mapargs == nil then
				ColourNote ("lightblue", "black", "Map bag is now clear!")
				else 
				ColourNote ("red", "black", "Map bag is still set as "..mapargs)
				end</send>
		</alias>
		<alias
				match="^clear miscbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("MiscBag")
				miscargs=GetVariable ("MiscBag")
				if miscargs == nil then
				ColourNote ("lightblue", "black", "Miscellaneous bag is now clear!")
				else 
				ColourNote ("red", "black", "Miscellaneous bag is still set as "..miscargs)
				end</send>
		</alias>
		<alias
				match="^clear potbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("PotBag")
				potargs=GetVariable ("PotBag")
				if potargs == nil then
				ColourNote ("lightblue", "black", "Potion bag is now clear!")
				else 
				ColourNote ("red", "black", "Potion bag is still set as "..potargs)
				end</send>
		</alias>

		<alias
				match="^clear shinbag$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("ShinBag")
				shinargs=GetVariable ("ShinBag")
				if shinargs == nil then
				ColourNote ("lightblue", "black", "Shinare bag is now clear!")
				else 
				ColourNote ("red", "black", "Shinare bag is still set as "..shinargs)
				end</send>
		</alias>
		<alias
				match="^bedclear$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("MyBed")
				bedargs=GetVariable ("MyBed")
				if bedargs == nil then
				ColourNote ("lightblue", "black", "Your bed is now clear!")
				else 
				ColourNote ("red", "black", "Your bed is still set as "..bedargs)
				end</send>
		</alias>
		<alias
				match="^lightclear$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("MyLight")
				lightargs=GetVariable ("MyLight")
				if lightargs == nil then
				ColourNote ("lightblue", "black", "Your light is now clear!")
				else 
				ColourNote ("red", "black", "Your light is still set as "..lightargs)
				end</send>
		</alias>
		<alias
				match="^itemclear 1$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("Item1")
				i1args=GetVariable ("Item1")
				if i1args == nil then
				ColourNote ("lightblue", "black", "Item 1 is now clear!")
				else 
				ColourNote ("red", "black", "Item 1 is still set as "..i1args)
				end</send>
		</alias>
		<alias
				match="^itemclear 2$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("Item2")
				i2args=GetVariable ("Item2")
				if i2args == nil then
				ColourNote ("lightblue", "black", "Item 2 is now clear!")
				else 
				ColourNote ("red", "black", "Item 2 is still set as "..i2args)
				end</send>
		</alias>
		<alias
				match="^itemclear 3$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("Item3")
				i3args=GetVariable ("Item3")
				if i3args == nil then
				ColourNote ("lightblue", "black", "Item 3 is now clear!")
				else 
				ColourNote ("red", "black", "Item 3 is still set as "..i3args)
				end</send>
		</alias>
		<alias
				match="^itemclear 4$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("Item4")
				i4args=GetVariable ("Item4")
				if i4args == nil then
				ColourNote ("lightblue", "black", "Item 4 is now clear!")
				else 
				ColourNote ("red", "black", "Item 4 is still set as "..i4args)
				end</send>
		</alias>
		<alias
				match="^itemclear 5$"
				enabled="y"
				group="OCB_InfoClear"
				regexp="y"
				send_to="12"
				ignore_case="y"
				sequence="100"
				>
			<send>DeleteVariable("Item5")
				i5args=GetVariable ("Item5")
				if i5args == nil then
				ColourNote ("lightblue", "black", "Item 5 is now clear!")
				else 
				ColourNote ("red", "black", "Item 5 is still set as "..i5args)
				end</send>
		</alias>
	</aliases>

	<!--  Variables  -->

	<variables>
	</variables>

</muclient>
